{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-voronoi/package.json","includedInParent":true,"mtime":1501879468000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":23}},{"name":"d3-voronoi","loc":{"line":3,"column":22}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Voronoi;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Voronoi = require('d3-voronoi');\n\nfunction Voronoi(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nVoronoi.Definition = {\n  \"type\": \"Voronoi\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"x\", \"type\": \"field\", \"required\": true }, { \"name\": \"y\", \"type\": \"field\", \"required\": true }, { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 }, { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n    \"default\": [[-1e5, -1e5], [1e5, 1e5]],\n    \"content\": { \"type\": \"number\", \"array\": true, \"length\": 2 } }, { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Voronoi, _vegaDataflow.Transform);\n\nvar defaultExtent = [[-1e5, -1e5], [1e5, 1e5]];\n\nprototype.transform = function (_, pulse) {\n  var as = _.as || 'path',\n      data = pulse.source,\n      diagram,\n      polygons,\n      i,\n      n;\n\n  // configure and construct voronoi diagram\n  diagram = (0, _d3Voronoi.voronoi)().x(_.x).y(_.y);\n  if (_.size) diagram.size(_.size);else diagram.extent(_.extent || defaultExtent);\n\n  this.value = diagram = diagram(data);\n\n  // map polygons to paths\n  polygons = diagram.polygons();\n  for (i = 0, n = data.length; i < n; ++i) {\n    data[i][as] = polygons[i] ? 'M' + polygons[i].join('L') + 'Z' : null;\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n};"},"hash":"4c6f0439e764873f7ad5fddb23a5b77b","cacheData":{"env":{}}}