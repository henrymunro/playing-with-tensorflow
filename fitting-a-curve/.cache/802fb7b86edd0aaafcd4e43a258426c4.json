{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-scenegraph/package.json","includedInParent":true,"mtime":1518728314000},{"name":"../path/shapes","loc":{"line":1,"column":24}},{"name":"../bound/boundStroke","loc":{"line":2,"column":24}},{"name":"../util/visit","loc":{"line":3,"column":31}},{"name":"../util/canvas/stroke","loc":{"line":4,"column":19}},{"name":"../util/canvas/fill","loc":{"line":5,"column":17}},{"name":"../util/svg/clip","loc":{"line":6,"column":17}},{"name":"../util/svg/translateItem","loc":{"line":7,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _shapes = require('../path/shapes');\n\nvar _boundStroke = require('../bound/boundStroke');\n\nvar _boundStroke2 = _interopRequireDefault(_boundStroke);\n\nvar _visit = require('../util/visit');\n\nvar _stroke = require('../util/canvas/stroke');\n\nvar _stroke2 = _interopRequireDefault(_stroke);\n\nvar _fill = require('../util/canvas/fill');\n\nvar _fill2 = _interopRequireDefault(_fill);\n\nvar _clip = require('../util/svg/clip');\n\nvar _clip2 = _interopRequireDefault(_clip);\n\nvar _translateItem = require('../util/svg/translateItem');\n\nvar _translateItem2 = _interopRequireDefault(_translateItem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar StrokeOffset = 0.5;\n\nfunction attr(emit, item) {\n  emit('transform', (0, _translateItem2.default)(item));\n}\n\nfunction background(emit, item) {\n  var offset = item.stroke ? StrokeOffset : 0;\n  emit('class', 'background');\n  emit('d', (0, _shapes.rectangle)(null, item, offset, offset));\n}\n\nfunction foreground(emit, item, renderer) {\n  var url = item.clip ? (0, _clip2.default)(renderer, item, item) : null;\n  emit('clip-path', url);\n}\n\nfunction bound(bounds, group) {\n  if (!group.clip && group.items) {\n    var items = group.items;\n    for (var j = 0, m = items.length; j < m; ++j) {\n      bounds.union(items[j].bounds);\n    }\n  }\n\n  if (group.clip || group.width || group.height) {\n    (0, _boundStroke2.default)(bounds.add(0, 0).add(group.width || 0, group.height || 0), group);\n  }\n\n  return bounds.translate(group.x || 0, group.y || 0);\n}\n\nfunction draw(context, scene, bounds) {\n  var renderer = this;\n\n  (0, _visit.visit)(scene, function (group) {\n    var gx = group.x || 0,\n        gy = group.y || 0,\n        w = group.width || 0,\n        h = group.height || 0,\n        offset,\n        opacity;\n\n    // setup graphics context\n    context.save();\n    context.translate(gx, gy);\n\n    // draw group background\n    if (group.stroke || group.fill) {\n      opacity = group.opacity == null ? 1 : group.opacity;\n      if (opacity > 0) {\n        context.beginPath();\n        offset = group.stroke ? StrokeOffset : 0;\n        (0, _shapes.rectangle)(context, group, offset, offset);\n        if (group.fill && (0, _fill2.default)(context, group, opacity)) {\n          context.fill();\n        }\n        if (group.stroke && (0, _stroke2.default)(context, group, opacity)) {\n          context.stroke();\n        }\n      }\n    }\n\n    // set clip and bounds\n    if (group.clip) {\n      context.beginPath();\n      context.rect(0, 0, w, h);\n      context.clip();\n    }\n    if (bounds) bounds.translate(-gx, -gy);\n\n    // draw group contents\n    (0, _visit.visit)(group, function (item) {\n      renderer.draw(context, item, bounds);\n    });\n\n    // restore graphics context\n    if (bounds) bounds.translate(gx, gy);\n    context.restore();\n  });\n}\n\nfunction pick(context, scene, x, y, gx, gy) {\n  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {\n    return null;\n  }\n\n  var handler = this;\n\n  return (0, _visit.pickVisit)(scene, function (group) {\n    var hit, dx, dy, b;\n\n    // first hit test against bounding box\n    // if a group is clipped, that should be handled by the bounds check.\n    b = group.bounds;\n    if (b && !b.contains(gx, gy)) return;\n\n    // passed bounds check, so test sub-groups\n    dx = group.x || 0;\n    dy = group.y || 0;\n\n    context.save();\n    context.translate(dx, dy);\n\n    dx = gx - dx;\n    dy = gy - dy;\n\n    hit = (0, _visit.pickVisit)(group, function (mark) {\n      return pickMark(mark, dx, dy) ? handler.pick(mark, x, y, dx, dy) : null;\n    });\n\n    context.restore();\n    if (hit) return hit;\n\n    hit = scene.interactive !== false && (group.fill || group.stroke) && dx >= 0 && dx <= group.width && dy >= 0 && dy <= group.height;\n\n    return hit ? group : null;\n  });\n}\n\nfunction pickMark(mark, x, y) {\n  return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);\n}\n\nexports.default = {\n  type: 'group',\n  tag: 'g',\n  nested: false,\n  attr: attr,\n  bound: bound,\n  draw: draw,\n  pick: pick,\n  background: background,\n  foreground: foreground\n};"},"hash":"d3900d3e43df7f40c429d0f0c7ff6a36","cacheData":{"env":{}}}