{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-encode/package.json","includedInParent":true,"mtime":1520281405000},{"name":"vega-dataflow","loc":{"line":1,"column":41}},{"name":"vega-util","loc":{"line":2,"column":48}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DataJoin;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Joins a set of data elements against a set of visual items.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): object} [params.item] - An item generator function.\n * @param {function(object): *} [params.key] - The key field associating data and visual items.\n */\nfunction DataJoin(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(DataJoin, _vegaDataflow.Transform);\n\nfunction defaultItemCreate() {\n  return (0, _vegaDataflow.ingest)({});\n}\n\nfunction isExit(t) {\n  return t.exit;\n}\n\nprototype.transform = function (_, pulse) {\n  var df = pulse.dataflow,\n      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      item = _.item || defaultItemCreate,\n      key = _.key || _vegaDataflow.tupleid,\n      map = this.value;\n\n  // prevent transient (e.g., hover) requests from\n  // cascading across marks derived from marks\n  if ((0, _vegaUtil.isArray)(out.encode)) {\n    out.encode = null;\n  }\n\n  if (map && (_.modified('key') || pulse.modified(key))) {\n    (0, _vegaUtil.error)('DataJoin does not support modified key function or fields.');\n  }\n\n  if (!map) {\n    pulse = pulse.addAll();\n    this.value = map = (0, _vegaUtil.fastmap)().test(isExit);\n    map.lookup = function (t) {\n      return map.get(key(t));\n    };\n  }\n\n  pulse.visit(pulse.ADD, function (t) {\n    var k = key(t),\n        x = map.get(k);\n\n    if (x) {\n      if (x.exit) {\n        map.empty--;\n        out.add.push(x);\n      } else {\n        out.mod.push(x);\n      }\n    } else {\n      map.set(k, x = item(t));\n      out.add.push(x);\n    }\n\n    x.datum = t;\n    x.exit = false;\n  });\n\n  pulse.visit(pulse.MOD, function (t) {\n    var k = key(t),\n        x = map.get(k);\n\n    if (x) {\n      x.datum = t;\n      out.mod.push(x);\n    }\n  });\n\n  pulse.visit(pulse.REM, function (t) {\n    var k = key(t),\n        x = map.get(k);\n\n    if (t === x.datum && !x.exit) {\n      out.rem.push(x);\n      x.exit = true;\n      ++map.empty;\n    }\n  });\n\n  if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');\n\n  if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);\n\n  return out;\n};"},"hash":"b5ede93acbb03037d9e2193d3598ae9f","cacheData":{"env":{}}}