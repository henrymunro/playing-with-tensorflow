{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"./util/util","loc":{"line":1,"column":25}},{"name":"vega-dataflow","loc":{"line":2,"column":32}},{"name":"vega-util","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Flatten;\n\nvar _util = require('./util/util');\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Flattens array-typed field values into new data objects.\n * If multiple fields are specified, they are treated as parallel arrays,\n * with output values included for each matching index (or null if missing).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of field\n *   accessors for the tuple fields that should be flattened.\n * @param {Array<string>} [params.as] - Output field names for flattened\n *   array fields. Any unspecified fields will use the field name provided\n *   by the fields accessors.\n */\nfunction Flatten(params) {\n  _vegaDataflow.Transform.call(this, [], params);\n}\n\nFlatten.Definition = {\n  \"type\": \"Flatten\",\n  \"metadata\": { \"generates\": true, \"source\": true },\n  \"params\": [{ \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true }, { \"name\": \"as\", \"type\": \"string\", \"array\": true }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Flatten, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE),\n      fields = _.fields,\n      as = (0, _util.fieldNames)(fields, _.as || []),\n      m = as.length;\n\n  // remove any previous results\n  out.rem = this.value;\n\n  // generate flattened tuples\n  pulse.visit(pulse.SOURCE, function (t) {\n    var arrays = fields.map(function (f) {\n      return f(t);\n    }),\n        maxlen = arrays.reduce(function (l, a) {\n      return Math.max(l, a.length);\n    }, 0),\n        i = 0,\n        j,\n        d,\n        v;\n\n    for (; i < maxlen; ++i) {\n      d = (0, _vegaDataflow.derive)(t);\n      for (j = 0; j < m; ++j) {\n        d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n      }\n      out.add.push(d);\n    }\n  });\n\n  this.value = out.source = out.add;\n  return out.modifies(as);\n};"},"hash":"3f4536cd0ce18a9fa33c2864e7b9e674","cacheData":{"env":{}}}