{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/topojson-client/package.json","includedInParent":true,"mtime":1490936790000},{"name":"./reverse","loc":{"line":1,"column":20}},{"name":"./transform","loc":{"line":2,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (topology, o) {\n  return o.type === \"GeometryCollection\" ? { type: \"FeatureCollection\", features: o.geometries.map(function (o) {\n      return feature(topology, o);\n    }) } : feature(topology, o);\n};\n\nexports.feature = feature;\nexports.object = object;\n\nvar _reverse = require(\"./reverse\");\n\nvar _reverse2 = _interopRequireDefault(_reverse);\n\nvar _transform = require(\"./transform\");\n\nvar _transform2 = _interopRequireDefault(_transform);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? { type: \"Feature\", properties: properties, geometry: geometry } : bbox == null ? { type: \"Feature\", id: id, properties: properties, geometry: geometry } : { type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry };\n}\n\nfunction object(topology, o) {\n  var transformPoint = (0, _transform2.default)(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) (0, _reverse2.default)(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type,\n        coordinates;\n    switch (type) {\n      case \"GeometryCollection\":\n        return { type: type, geometries: o.geometries.map(geometry) };\n      case \"Point\":\n        coordinates = point(o.coordinates);break;\n      case \"MultiPoint\":\n        coordinates = o.coordinates.map(point);break;\n      case \"LineString\":\n        coordinates = line(o.arcs);break;\n      case \"MultiLineString\":\n        coordinates = o.arcs.map(line);break;\n      case \"Polygon\":\n        coordinates = polygon(o.arcs);break;\n      case \"MultiPolygon\":\n        coordinates = o.arcs.map(polygon);break;\n      default:\n        return null;\n    }\n    return { type: type, coordinates: coordinates };\n  }\n\n  return geometry(o);\n}"},"hash":"a4d738ffb183b9cb7d507ccb5e94025b","cacheData":{"env":{}}}