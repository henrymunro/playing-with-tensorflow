{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-hierarchy/package.json","includedInParent":true,"mtime":1518550386000},{"name":"./HierarchyLayout","loc":{"line":1,"column":28}},{"name":"vega-util","loc":{"line":2,"column":30}},{"name":"d3-hierarchy","loc":{"line":11,"column":7}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Treemap;\n\nvar _HierarchyLayout = require('./HierarchyLayout');\n\nvar _HierarchyLayout2 = _interopRequireDefault(_HierarchyLayout);\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Hierarchy = require('d3-hierarchy');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Tiles = {\n  binary: _d3Hierarchy.treemapBinary,\n  dice: _d3Hierarchy.treemapDice,\n  slice: _d3Hierarchy.treemapSlice,\n  slicedice: _d3Hierarchy.treemapSliceDice,\n  squarify: _d3Hierarchy.treemapSquarify,\n  resquarify: _d3Hierarchy.treemapResquarify\n};\n\nvar Output = [\"x0\", \"y0\", \"x1\", \"y1\", \"depth\", \"children\"];\n\n/**\n * Treemap layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nfunction Treemap(params) {\n  _HierarchyLayout2.default.call(this, params);\n}\n\nTreemap.Definition = {\n  \"type\": \"Treemap\",\n  \"metadata\": { \"tree\": true, \"modifies\": true },\n  \"params\": [{ \"name\": \"field\", \"type\": \"field\" }, { \"name\": \"sort\", \"type\": \"compare\" }, { \"name\": \"method\", \"type\": \"enum\", \"default\": \"squarify\",\n    \"values\": [\"squarify\", \"resquarify\", \"binary\", \"dice\", \"slice\", \"slicedice\"] }, { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"paddingInner\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"paddingOuter\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"paddingTop\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"paddingRight\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"paddingBottom\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"paddingLeft\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"ratio\", \"type\": \"number\", \"default\": 1.618033988749895 }, { \"name\": \"round\", \"type\": \"boolean\", \"default\": false }, { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 4, \"default\": Output }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Treemap, _HierarchyLayout2.default);\n\n/**\n * Treemap layout generator. Adds 'method' and 'ratio' parameters\n * to configure the underlying tile method.\n */\nprototype.layout = function () {\n  var x = (0, _d3Hierarchy.treemap)();\n  x.ratio = function (_) {\n    var t = x.tile();\n    if (t.ratio) x.tile(t.ratio(_));\n  };\n  x.method = function (_) {\n    if (Tiles.hasOwnProperty(_)) x.tile(Tiles[_]);else (0, _vegaUtil.error)('Unrecognized Treemap layout method: ' + _);\n  };\n  return x;\n};\n\nprototype.params = ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];\n\nprototype.fields = Output;"},"hash":"1bace9b73512b00f30b376b50ec2a412","cacheData":{"env":{}}}