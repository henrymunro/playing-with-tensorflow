{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-scenegraph/package.json","includedInParent":true,"mtime":1518728314000},{"name":"./Handler","loc":{"line":1,"column":20}},{"name":"./util/dom","loc":{"line":2,"column":22}},{"name":"vega-util","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SVGHandler;\n\nvar _Handler = require('./Handler');\n\nvar _Handler2 = _interopRequireDefault(_Handler);\n\nvar _dom = require('./util/dom');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction SVGHandler(loader) {\n  _Handler2.default.call(this, loader);\n  var h = this;\n  h._hrefHandler = listener(h, function (evt, item) {\n    if (item && item.href) h.handleHref(evt, item, item.href);\n  });\n  h._tooltipHandler = listener(h, function (evt, item) {\n    if (item && item.tooltip) {\n      h.handleTooltip(evt, item, evt.type === 'mouseover' ? item.tooltip : null);\n    }\n  });\n}\n\nvar prototype = (0, _vegaUtil.inherits)(SVGHandler, _Handler2.default);\n\nprototype.initialize = function (el, origin, obj) {\n  var svg = this._svg;\n  if (svg) {\n    svg.removeEventListener('click', this._hrefHandler);\n    svg.removeEventListener('mouseover', this._tooltipHandler);\n    svg.removeEventListener('mouseout', this._tooltipHandler);\n  }\n  this._svg = svg = el && (0, _dom.domFind)(el, 'svg');\n  if (svg) {\n    svg.addEventListener('click', this._hrefHandler);\n    svg.addEventListener('mouseover', this._tooltipHandler);\n    svg.addEventListener('mouseout', this._tooltipHandler);\n  }\n  return _Handler2.default.prototype.initialize.call(this, el, origin, obj);\n};\n\nprototype.svg = function () {\n  return this._svg;\n};\n\n// wrap an event listener for the SVG DOM\nfunction listener(context, handler) {\n  return function (evt) {\n    var target = evt.target,\n        item = target.__data__;\n    evt.vegaType = evt.type;\n    item = Array.isArray(item) ? item[0] : item;\n    handler.call(context._obj, evt, item);\n  };\n}\n\n// add an event handler\nprototype.on = function (type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers,\n      i = this._handlerIndex(h[name], type, handler);\n\n  if (i < 0) {\n    var x = {\n      type: type,\n      handler: handler,\n      listener: listener(this, handler)\n    };\n\n    (h[name] || (h[name] = [])).push(x);\n    if (this._svg) {\n      this._svg.addEventListener(name, x.listener);\n    }\n  }\n\n  return this;\n};\n\n// remove an event handler\nprototype.off = function (type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers[name],\n      i = this._handlerIndex(h, type, handler);\n\n  if (i >= 0) {\n    if (this._svg) {\n      this._svg.removeEventListener(name, h[i].listener);\n    }\n    h.splice(i, 1);\n  }\n\n  return this;\n};"},"hash":"30a59f9ced35d63bf88bff4f6710156b","cacheData":{"env":{}}}