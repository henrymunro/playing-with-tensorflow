{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-scenegraph/package.json","includedInParent":true,"mtime":1518728314000},{"name":"./Handler","loc":{"line":1,"column":20}},{"name":"./marks/index","loc":{"line":2,"column":18}},{"name":"./util/point","loc":{"line":3,"column":18}},{"name":"./util/dom","loc":{"line":4,"column":22}},{"name":"vega-util","loc":{"line":5,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = CanvasHandler;\n\nvar _Handler = require('./Handler');\n\nvar _Handler2 = _interopRequireDefault(_Handler);\n\nvar _index = require('./marks/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _point = require('./util/point');\n\nvar _point2 = _interopRequireDefault(_point);\n\nvar _dom = require('./util/dom');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction CanvasHandler(loader) {\n  _Handler2.default.call(this, loader);\n  this._down = null;\n  this._touch = null;\n  this._first = true;\n}\n\nvar prototype = (0, _vegaUtil.inherits)(CanvasHandler, _Handler2.default);\n\nprototype.initialize = function (el, origin, obj) {\n  // add event listeners\n  var canvas = this._canvas = el && (0, _dom.domFind)(el, 'canvas');\n  if (canvas) {\n    var that = this;\n    this.events.forEach(function (type) {\n      canvas.addEventListener(type, function (evt) {\n        if (prototype[type]) {\n          prototype[type].call(that, evt);\n        } else {\n          that.fire(type, evt);\n        }\n      });\n    });\n  }\n\n  return _Handler2.default.prototype.initialize.call(this, el, origin, obj);\n};\n\nprototype.canvas = function () {\n  return this._canvas;\n};\n\n// retrieve the current canvas context\nprototype.context = function () {\n  return this._canvas.getContext('2d');\n};\n\n// supported events\nprototype.events = ['keydown', 'keypress', 'keyup', 'dragenter', 'dragleave', 'dragover', 'mousedown', 'mouseup', 'mousemove', 'mouseout', 'mouseover', 'click', 'dblclick', 'wheel', 'mousewheel', 'touchstart', 'touchmove', 'touchend'];\n\n// to keep old versions of firefox happy\nprototype.DOMMouseScroll = function (evt) {\n  this.fire('mousewheel', evt);\n};\n\nfunction move(moveEvent, overEvent, outEvent) {\n  return function (evt) {\n    var a = this._active,\n        p = this.pickEvent(evt);\n\n    if (p === a) {\n      // active item and picked item are the same\n      this.fire(moveEvent, evt); // fire move\n    } else {\n      // active item and picked item are different\n      if (!a || !a.exit) {\n        // fire out for prior active item\n        // suppress if active item was removed from scene\n        this.fire(outEvent, evt);\n      }\n      this._active = p; // set new active item\n      this.fire(overEvent, evt); // fire over for new active item\n      this.fire(moveEvent, evt); // fire move for new active item\n    }\n  };\n}\n\nfunction inactive(type) {\n  return function (evt) {\n    this.fire(type, evt);\n    this._active = null;\n  };\n}\n\nprototype.mousemove = move('mousemove', 'mouseover', 'mouseout');\nprototype.dragover = move('dragover', 'dragenter', 'dragleave');\n\nprototype.mouseout = inactive('mouseout');\nprototype.dragleave = inactive('dragleave');\n\nprototype.mousedown = function (evt) {\n  this._down = this._active;\n  this.fire('mousedown', evt);\n};\n\nprototype.click = function (evt) {\n  if (this._down === this._active) {\n    this.fire('click', evt);\n    this._down = null;\n  }\n};\n\nprototype.touchstart = function (evt) {\n  this._touch = this.pickEvent(evt.changedTouches[0]);\n\n  if (this._first) {\n    this._active = this._touch;\n    this._first = false;\n  }\n\n  this.fire('touchstart', evt, true);\n};\n\nprototype.touchmove = function (evt) {\n  this.fire('touchmove', evt, true);\n};\n\nprototype.touchend = function (evt) {\n  this.fire('touchend', evt, true);\n  this._touch = null;\n};\n\n// fire an event\nprototype.fire = function (type, evt, touch) {\n  var a = touch ? this._touch : this._active,\n      h = this._handlers[type],\n      i,\n      len;\n\n  // if hyperlinked, handle link first\n  if (type === 'click' && a && a.href) {\n    this.handleHref(evt, a, a.href);\n  } else if ((type === 'mouseover' || type === 'mouseout') && a && a.tooltip) {\n    this.handleTooltip(evt, a, type === 'mouseover' ? a.tooltip : null);\n  }\n\n  // invoke all registered handlers\n  if (h) {\n    evt.vegaType = type;\n    for (i = 0, len = h.length; i < len; ++i) {\n      h[i].handler.call(this._obj, evt, a);\n    }\n  }\n};\n\n// add an event handler\nprototype.on = function (type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers,\n      i = this._handlerIndex(h[name], type, handler);\n\n  if (i < 0) {\n    (h[name] || (h[name] = [])).push({\n      type: type,\n      handler: handler\n    });\n  }\n\n  return this;\n};\n\n// remove an event handler\nprototype.off = function (type, handler) {\n  var name = this.eventName(type),\n      h = this._handlers[name],\n      i = this._handlerIndex(h, type, handler);\n\n  if (i >= 0) {\n    h.splice(i, 1);\n  }\n\n  return this;\n};\n\nprototype.pickEvent = function (evt) {\n  var p = (0, _point2.default)(evt, this._canvas),\n      o = this._origin;\n  return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);\n};\n\n// find the scenegraph item at the current mouse position\n// x, y -- the absolute x, y mouse coordinates on the canvas element\n// gx, gy -- the relative coordinates within the current group\nprototype.pick = function (scene, x, y, gx, gy) {\n  var g = this.context(),\n      mark = _index2.default[scene.marktype];\n  return mark.pick.call(this, g, scene, x, y, gx, gy);\n};"},"hash":"ac2c77b432caf65106c78d63389909d1","cacheData":{"env":{}}}