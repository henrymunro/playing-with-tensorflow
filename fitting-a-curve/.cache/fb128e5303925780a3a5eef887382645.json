{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-geo/package.json","includedInParent":true,"mtime":1518585631000},{"name":"vega-dataflow","loc":{"line":1,"column":32}},{"name":"vega-util","loc":{"line":2,"column":23}},{"name":"d3-array","loc":{"line":3,"column":21}},{"name":"d3-contour","loc":{"line":4,"column":39}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Contour;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Array = require('d3-array');\n\nvar _d3Contour = require('d3-contour');\n\nvar CONTOUR_PARAMS = ['values', 'size'];\nvar DENSITY_PARAMS = ['x', 'y', 'size', 'cellSize', 'bandwidth'];\n\n/**\n * Generate contours based on kernel-density estimation of point data.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.\n *  If the values parameter is provided, this must be the dimensions of the input data.\n *  If density estimation is performed, this is the output view dimensions in pixels.\n * @param {Array<number>} [params.values] - An array of numeric values representing an\n *  width x height grid of values over which to compute contours. If unspecified, this\n *  transform will instead attempt to compute contours for the kernel density estimate\n *  using values drawn from data tuples in the input pulse.\n * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.\n * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.\n * @param {number} [params.cellSize] - Contour density calculation cell size.\n * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.\n * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n *   this parameter is set, the count and nice parameters will be ignored.\n * @param {number} [params.count] - The desired number of contours.\n * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n *   threshold values should be automatically aligned to \"nice\"\n *   human-friendly values. Setting this flag may cause the number of\n *   thresholds to deviate from the specified count.\n */\nfunction Contour(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nContour.Definition = {\n  \"type\": \"Contour\",\n  \"metadata\": { \"generates\": true },\n  \"params\": [{ \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true }, { \"name\": \"values\", \"type\": \"number\", \"array\": true }, { \"name\": \"x\", \"type\": \"field\" }, { \"name\": \"y\", \"type\": \"field\" }, { \"name\": \"cellSize\", \"type\": \"number\" }, { \"name\": \"bandwidth\", \"type\": \"number\" }, { \"name\": \"count\", \"type\": \"number\" }, { \"name\": \"nice\", \"type\": \"number\", \"default\": false }, { \"name\": \"thresholds\", \"type\": \"number\", \"array\": true }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Contour, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      count = _.count || 10,\n      contour,\n      params,\n      values;\n\n  if (_.values) {\n    contour = (0, _d3Contour.contours)();\n    params = CONTOUR_PARAMS;\n    values = _.values;\n  } else {\n    contour = (0, _d3Contour.contourDensity)();\n    params = DENSITY_PARAMS;\n    values = pulse.materialize(pulse.SOURCE).source;\n  }\n\n  // set threshold parameter\n  contour.thresholds(_.thresholds || (_.nice ? count : quantize(count)));\n\n  // set all other parameters\n  params.forEach(function (param) {\n    if (_[param] != null) contour[param](_[param]);\n  });\n\n  if (this.value) out.rem = this.value;\n  values = values && values.length ? contour(values).map(_vegaDataflow.ingest) : [];\n  this.value = out.source = out.add = values;\n\n  return out;\n};\n\nfunction quantize(k) {\n  return function (values) {\n    var ex = (0, _d3Array.extent)(values),\n        x0 = ex[0],\n        dx = ex[1] - x0,\n        t = [],\n        i = 1;\n    for (; i <= k; ++i) t.push(x0 + dx * i / (k + 1));\n    return t;\n  };\n}"},"hash":"eba26adb57397ea3055899459cbc4446","cacheData":{"env":{}}}