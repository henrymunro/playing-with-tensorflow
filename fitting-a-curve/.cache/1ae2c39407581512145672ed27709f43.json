{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/d3-scale/package.json","includedInParent":true,"mtime":1517166165000},{"name":"./array","loc":{"line":1,"column":18}},{"name":"./linear","loc":{"line":2,"column":24}},{"name":"./number","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = identity;\n\nvar _array = require(\"./array\");\n\nvar _linear = require(\"./linear\");\n\nvar _number = require(\"./number\");\n\nvar _number2 = _interopRequireDefault(_number);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction identity() {\n  var domain = [0, 1];\n\n  function scale(x) {\n    return +x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function (_) {\n    return arguments.length ? (domain = _array.map.call(_, _number2.default), scale) : domain.slice();\n  };\n\n  scale.copy = function () {\n    return identity().domain(domain);\n  };\n\n  return (0, _linear.linearish)(scale);\n}"},"hash":"b76ccaea0f1333ebcb70130b8f31d657","cacheData":{"env":{}}}