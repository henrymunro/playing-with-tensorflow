{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-geo/package.json","includedInParent":true,"mtime":1518585631000},{"name":"vega-dataflow","loc":{"line":1,"column":41}},{"name":"vega-util","loc":{"line":2,"column":35}},{"name":"d3-geo","loc":{"line":3,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Graticule;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Geo = require('d3-geo');\n\n/**\n * GeoJSON feature generator for creating graticules.\n * @constructor\n */\nfunction Graticule(params) {\n  _vegaDataflow.Transform.call(this, [], params);\n  this.generator = (0, _d3Geo.geoGraticule)();\n}\n\nGraticule.Definition = {\n  \"type\": \"Graticule\",\n  \"metadata\": { \"source\": true, \"generates\": true, \"changes\": true },\n  \"params\": [{ \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n    \"content\": { \"type\": \"number\", \"array\": true, \"length\": 2 } }, { \"name\": \"extentMajor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n    \"content\": { \"type\": \"number\", \"array\": true, \"length\": 2 } }, { \"name\": \"extentMinor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n    \"content\": { \"type\": \"number\", \"array\": true, \"length\": 2 } }, { \"name\": \"step\", \"type\": \"number\", \"array\": true, \"length\": 2 }, { \"name\": \"stepMajor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [90, 360] }, { \"name\": \"stepMinor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [10, 10] }, { \"name\": \"precision\", \"type\": \"number\", \"default\": 2.5 }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Graticule, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(),\n      src = this.value,\n      gen = this.generator,\n      t;\n\n  if (!src.length || _.modified()) {\n    for (var prop in _) {\n      if ((0, _vegaUtil.isFunction)(gen[prop])) {\n        gen[prop](_[prop]);\n      }\n    }\n  }\n\n  t = gen();\n  if (src.length) {\n    out.mod.push((0, _vegaDataflow.replace)(src[0], t));\n  } else {\n    out.add.push((0, _vegaDataflow.ingest)(t));\n  }\n  src[0] = t;\n  out.source = src;\n\n  return out;\n};"},"hash":"8ec4dce692b4d92d80dab215447e875f","cacheData":{"env":{}}}