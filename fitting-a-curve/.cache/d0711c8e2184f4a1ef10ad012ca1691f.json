{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"vega-dataflow","loc":{"line":1,"column":32}},{"name":"vega-util","loc":{"line":2,"column":37}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Fold;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\nfunction Fold(params) {\n  _vegaDataflow.Transform.call(this, [], params);\n}\n\nFold.Definition = {\n  \"type\": \"Fold\",\n  \"metadata\": { \"generates\": true, \"source\": true },\n  \"params\": [{ \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"key\", \"value\"] }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Fold, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE),\n      fields = _.fields,\n      fnames = fields.map(_vegaUtil.accessorName),\n      as = _.as || ['key', 'value'],\n      k = as[0],\n      v = as[1],\n      n = fields.length;\n\n  out.rem = this.value;\n\n  pulse.visit(pulse.SOURCE, function (t) {\n    for (var i = 0, d; i < n; ++i) {\n      d = (0, _vegaDataflow.derive)(t);\n      d[k] = fnames[i];\n      d[v] = fields[i](t);\n      out.add.push(d);\n    }\n  });\n\n  this.value = out.source = out.add;\n  return out.modifies(as);\n};"},"hash":"bd180691d6873c18de158a470c5299eb","cacheData":{"env":{}}}