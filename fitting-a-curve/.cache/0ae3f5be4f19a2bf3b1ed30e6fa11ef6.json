{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-projection/package.json","includedInParent":true,"mtime":1518729478000},{"name":"d3-geo","loc":{"line":16,"column":7}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.projectionProperties = undefined;\nexports.projection = projection;\nexports.getProjectionPath = getProjectionPath;\n\nvar _d3Geo = require('d3-geo');\n\nvar defaultPath = (0, _d3Geo.geoPath)();\n\nvar projectionProperties = exports.projectionProperties = [\n// standard properties in d3-geo\n'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision',\n\n// extended properties in d3-geo-projections\n'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n\n/**\n * Augment projections with their type and a copy method.\n */\nfunction create(type, constructor) {\n  return function projection() {\n    var p = constructor();\n\n    p.type = type;\n\n    p.path = (0, _d3Geo.geoPath)().projection(p);\n\n    p.copy = p.copy || function () {\n      var c = projection();\n      projectionProperties.forEach(function (prop) {\n        if (p.hasOwnProperty(prop)) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n\n    return p;\n  };\n}\n\nfunction projection(type, proj) {\n  if (!type || typeof type !== 'string') {\n    throw new Error('Projection type must be a name string.');\n  }\n  type = type.toLowerCase();\n  if (arguments.length > 1) {\n    projections[type] = create(type, proj);\n    return this;\n  } else {\n    return projections.hasOwnProperty(type) ? projections[type] : null;\n  }\n}\n\nfunction getProjectionPath(proj) {\n  return proj && proj.path || defaultPath;\n}\n\nvar projections = {\n  // base d3-geo projection types\n  albers: _d3Geo.geoAlbers,\n  albersusa: _d3Geo.geoAlbersUsa,\n  azimuthalequalarea: _d3Geo.geoAzimuthalEqualArea,\n  azimuthalequidistant: _d3Geo.geoAzimuthalEquidistant,\n  conicconformal: _d3Geo.geoConicConformal,\n  conicequalarea: _d3Geo.geoConicEqualArea,\n  conicequidistant: _d3Geo.geoConicEquidistant,\n  equirectangular: _d3Geo.geoEquirectangular,\n  gnomonic: _d3Geo.geoGnomonic,\n  mercator: _d3Geo.geoMercator,\n  orthographic: _d3Geo.geoOrthographic,\n  stereographic: _d3Geo.geoStereographic,\n  transversemercator: _d3Geo.geoTransverseMercator\n};\n\nfor (var key in projections) {\n  projection(key, projections[key]);\n}"},"hash":"7d1416bdf21a3bf78bba9ceb360c4b71","cacheData":{"env":{}}}