{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-dataflow/package.json","includedInParent":true,"mtime":1518291445000},{"name":"./add","loc":{"line":1,"column":16}},{"name":"./connect","loc":{"line":2,"column":20}},{"name":"./events","loc":{"line":3,"column":19}},{"name":"./load","loc":{"line":4,"column":30}},{"name":"./on","loc":{"line":5,"column":15}},{"name":"./rank","loc":{"line":6,"column":27}},{"name":"./run","loc":{"line":7,"column":57}},{"name":"./update","loc":{"line":8,"column":35}},{"name":"../ChangeSet","loc":{"line":9,"column":22}},{"name":"../util/Heap","loc":{"line":10,"column":17}},{"name":"../util/UniqueList","loc":{"line":11,"column":23}},{"name":"vega-loader","loc":{"line":12,"column":21}},{"name":"vega-util","loc":{"line":13,"column":32}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Dataflow;\n\nvar _add = require('./add');\n\nvar _add2 = _interopRequireDefault(_add);\n\nvar _connect = require('./connect');\n\nvar _connect2 = _interopRequireDefault(_connect);\n\nvar _events = require('./events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _load = require('./load');\n\nvar _on = require('./on');\n\nvar _on2 = _interopRequireDefault(_on);\n\nvar _rank = require('./rank');\n\nvar _run = require('./run');\n\nvar _update = require('./update');\n\nvar _ChangeSet = require('../ChangeSet');\n\nvar _ChangeSet2 = _interopRequireDefault(_ChangeSet);\n\nvar _Heap = require('../util/Heap');\n\nvar _Heap2 = _interopRequireDefault(_Heap);\n\nvar _UniqueList = require('../util/UniqueList');\n\nvar _UniqueList2 = _interopRequireDefault(_UniqueList);\n\nvar _vegaLoader = require('vega-loader');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\nfunction Dataflow() {\n  this._log = (0, _vegaUtil.logger)();\n  this.logLevel(_vegaUtil.Error);\n\n  this._clock = 0;\n  this._rank = 0;\n  try {\n    this._loader = (0, _vegaLoader.loader)();\n  } catch (e) {\n    // do nothing if loader module is unavailable\n  }\n\n  this._touched = (0, _UniqueList2.default)(_vegaUtil.id);\n  this._pulses = {};\n  this._pulse = null;\n\n  this._heap = new _Heap2.default(function (a, b) {\n    return a.qrank - b.qrank;\n  });\n  this._postrun = [];\n}\n\nvar prototype = Dataflow.prototype;\n\n/**\n * The current timestamp of this dataflow. This value reflects the\n * timestamp of the previous dataflow run. The dataflow is initialized\n * with a stamp value of 0. The initial run of the dataflow will have\n * a timestap of 1, and so on. This value will match the\n * {@link Pulse.stamp} property.\n * @return {number} - The current timestamp value.\n */\nprototype.stamp = function () {\n  return this._clock;\n};\n\n/**\n * Gets or sets the loader instance to use for data file loading. A\n * loader object must provide a \"load\" method for loading files and a\n * \"sanitize\" method for checking URL/filename validity. Both methods\n * should accept a URI and options hash as arguments, and return a Promise\n * that resolves to the loaded file contents (load) or a hash containing\n * sanitized URI data with the sanitized url assigned to the \"href\" property\n * (sanitize).\n * @param {object} _ - The loader instance to use.\n * @return {object|Dataflow} - If no arguments are provided, returns\n *   the current loader instance. Otherwise returns this Dataflow instance.\n */\nprototype.loader = function (_) {\n  if (arguments.length) {\n    this._loader = _;\n    return this;\n  } else {\n    return this._loader;\n  }\n};\n\n/**\n * Empty entry threshold for garbage cleaning. Map data structures will\n * perform cleaning once the number of empty entries exceeds this value.\n */\nprototype.cleanThreshold = 1e4;\n\n// OPERATOR REGISTRATION\nprototype.add = _add2.default;\nprototype.connect = _connect2.default;\nprototype.rank = _rank.rank;\nprototype.rerank = _rank.rerank;\n\n// OPERATOR UPDATES\nprototype.pulse = _update.pulse;\nprototype.touch = _update.touch;\nprototype.update = _update.update;\nprototype.changeset = _ChangeSet2.default;\n\n// DATA LOADING\nprototype.ingest = _load.ingest;\nprototype.request = _load.request;\n\n// EVENT HANDLING\nprototype.events = _events2.default;\nprototype.on = _on2.default;\n\n// PULSE PROPAGATION\nprototype.run = _run.run;\nprototype.runAsync = _run.runAsync;\nprototype.runAfter = _run.runAfter;\nprototype._enqueue = _run.enqueue;\nprototype._getPulse = _run.getPulse;\n\n// LOGGING AND ERROR HANDLING\n\nfunction logMethod(method) {\n  return function () {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\n/**\n * Logs an error message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit error messages.\n */\nprototype.error = logMethod('error');\n\n/**\n * Logs a warning message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit warning messages.\n */\nprototype.warn = logMethod('warn');\n\n/**\n * Logs a information message. By default, logged messages are written to\n * console output. The message will only be logged if the current log level is\n * high enough to permit information messages.\n */\nprototype.info = logMethod('info');\n\n/**\n * Logs a debug message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit debug messages.\n */\nprototype.debug = logMethod('debug');\n\n/**\n * Get or set the current log level. If an argument is provided, it\n * will be used as the new log level.\n * @param {number} [level] - Should be one of None, Warn, Info\n * @return {number} - The current log level.\n */\nprototype.logLevel = logMethod('level');"},"hash":"fceb5c1445630735ef081b82441c8bff","cacheData":{"env":{}}}