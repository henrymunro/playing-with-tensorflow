{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-dataflow/package.json","includedInParent":true,"mtime":1518291445000},{"name":"../Operator","loc":{"line":1,"column":21}},{"name":"../ChangeSet","loc":{"line":2,"column":26}},{"name":"vega-util","loc":{"line":3,"column":43}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (source, target, update, params, options) {\n  var fn = source instanceof _Operator2.default ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n};\n\nvar _Operator = require('../Operator');\n\nvar _Operator2 = _interopRequireDefault(_Operator);\n\nvar _ChangeSet = require('../ChangeSet');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SKIP = { skip: true };\n\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\n\n\nfunction onStream(df, stream, target, update, params, options) {\n  var opt = (0, _vegaUtil.extend)({}, options, SKIP),\n      func,\n      op;\n\n  if (!(0, _vegaUtil.isFunction)(target)) target = (0, _vegaUtil.constant)(target);\n\n  if (update === undefined) {\n    func = function (e) {\n      df.touch(target(e));\n    };\n  } else if ((0, _vegaUtil.isFunction)(update)) {\n    op = new _Operator2.default(null, update, params, false);\n    func = function (e) {\n      var v,\n          t = target(e);\n      op.evaluate(e);\n      (0, _ChangeSet.isChangeSet)(v = op.value) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = function (e) {\n      df.update(target(e), update, opt);\n    };\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  var func, op;\n\n  if (update === undefined) {\n    op = target;\n  } else {\n    func = (0, _vegaUtil.isFunction)(update) ? update : (0, _vegaUtil.constant)(update);\n    update = !target ? func : function (_, pulse) {\n      var value = func(_, pulse);\n      return target.skip() ? value : target.skip(true).value = value;\n    };\n\n    op = new _Operator2.default(null, update, params, false);\n    op.modified(options && options.force);\n    op.rank = 0;\n\n    if (target) {\n      op.skip(true); // skip first invocation\n      op.value = target.value;\n      op.targets().add(target);\n    }\n  }\n\n  source.targets().add(op);\n}"},"hash":"2447c23922e9e6238a4722bc62e97a97","cacheData":{"env":{}}}