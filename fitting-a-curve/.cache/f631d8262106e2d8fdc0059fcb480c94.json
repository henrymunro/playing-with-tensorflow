{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-scale/package.json","includedInParent":true,"mtime":1517882812000},{"name":"d3-array","loc":{"line":1,"column":21}},{"name":"d3-scale","loc":{"line":2,"column":26}},{"name":"vega-util","loc":{"line":3,"column":19}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.binLinear = binLinear;\nexports.binOrdinal = binOrdinal;\n\nvar _d3Array = require('d3-array');\n\nvar _d3Scale = require('d3-scale');\n\nvar _vegaUtil = require('vega-util');\n\nvar map = Array.prototype.map,\n    slice = Array.prototype.slice;\n\nfunction numbers(_) {\n  return map.call(_, function (x) {\n    return +x;\n  });\n}\n\nfunction binLinear() {\n  var linear = (0, _d3Scale.scaleLinear)(),\n      domain = [];\n\n  function scale(x) {\n    return linear(x);\n  }\n\n  function setDomain(_) {\n    domain = numbers(_);\n    linear.domain([domain[0], (0, _vegaUtil.peek)(domain)]);\n  }\n\n  scale.domain = function (_) {\n    return arguments.length ? (setDomain(_), scale) : domain.slice();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (linear.range(_), scale) : linear.range();\n  };\n\n  scale.rangeRound = function (_) {\n    return arguments.length ? (linear.rangeRound(_), scale) : linear.rangeRound();\n  };\n\n  scale.interpolate = function (_) {\n    return arguments.length ? (linear.interpolate(_), scale) : linear.interpolate();\n  };\n\n  scale.invert = function (_) {\n    return linear.invert(_);\n  };\n\n  scale.ticks = function (count) {\n    var n = domain.length,\n        stride = ~~(n / (count || n));\n\n    return stride < 2 ? scale.domain() : domain.filter(function (x, i) {\n      return !(i % stride);\n    });\n  };\n\n  scale.tickFormat = function () {\n    return linear.tickFormat.apply(linear, arguments);\n  };\n\n  scale.copy = function () {\n    return binLinear().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}\n\nfunction binOrdinal() {\n  var domain = [],\n      range = [];\n\n  function scale(x) {\n    return x == null || x !== x ? undefined : range[((0, _d3Array.bisect)(domain, x) - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (arguments.length) {\n      domain = numbers(_);\n      return scale;\n    } else {\n      return domain.slice();\n    }\n  };\n\n  scale.range = function (_) {\n    if (arguments.length) {\n      range = slice.call(_);\n      return scale;\n    } else {\n      return range.slice();\n    }\n  };\n\n  scale.copy = function () {\n    return binOrdinal().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}"},"hash":"ffbcc19420711c951143d05b0fe32b70","cacheData":{"env":{}}}