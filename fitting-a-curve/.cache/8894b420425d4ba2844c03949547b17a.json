{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-hierarchy/package.json","includedInParent":true,"mtime":1518550386000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":30}},{"name":"d3-hierarchy","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Stratify;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Hierarchy = require('d3-hierarchy');\n\n/**\n * Stratify a collection of tuples into a tree structure based on\n * id and parent id fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.key - Unique key field for each tuple.\n * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n */\nfunction Stratify(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nStratify.Definition = {\n  \"type\": \"Stratify\",\n  \"metadata\": { \"treesource\": true },\n  \"params\": [{ \"name\": \"key\", \"type\": \"field\", \"required\": true }, { \"name\": \"parentKey\", \"type\": \"field\", \"required\": true }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Stratify, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  if (!pulse.source) {\n    (0, _vegaUtil.error)('Stratify transform requires an upstream data source.');\n  }\n\n  var mod = _.modified(),\n      tree,\n      map,\n      run = !this.value || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields);\n\n  if (run) {\n    tree = (0, _d3Hierarchy.stratify)().id(_.key).parentId(_.parentKey)(pulse.source);\n    map = tree.lookup = {};\n    tree.each(function (node) {\n      map[_.key(node.data)] = node;\n    });\n    this.value = tree;\n  }\n\n  pulse.source.root = this.value;\n  return mod ? pulse.fork(pulse.ALL) : pulse;\n};"},"hash":"de04065abdb3f58814c21918183cc2aa","cacheData":{"env":{}}}