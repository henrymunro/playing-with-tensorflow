{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/d3-scale/package.json","includedInParent":true,"mtime":1517166165000},{"name":"d3-array","loc":{"line":1,"column":55}},{"name":"./array","loc":{"line":2,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = quantile;\n\nvar _d3Array = require(\"d3-array\");\n\nvar _array = require(\"./array\");\n\nfunction quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [];\n\n  function rescale() {\n    var i = 0,\n        n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return range[(0, _d3Array.bisect)(thresholds, x)];\n  }\n\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n  };\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(_d3Array.ascending);\n    return rescale();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.quantiles = function () {\n    return thresholds.slice();\n  };\n\n  scale.copy = function () {\n    return quantile().domain(domain).range(range);\n  };\n\n  return scale;\n}"},"hash":"30696a1999541dbdcf3c233f5e66d36d","cacheData":{"env":{}}}