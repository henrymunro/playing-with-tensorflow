{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-wordcloud/package.json","includedInParent":true,"mtime":1516851787000},{"name":"./CloudLayout","loc":{"line":1,"column":18}},{"name":"vega-dataflow","loc":{"line":2,"column":24}},{"name":"vega-util","loc":{"line":3,"column":45}},{"name":"vega-scale","loc":{"line":4,"column":20}},{"name":"vega-statistics","loc":{"line":5,"column":21}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Wordcloud;\n\nvar _CloudLayout = require('./CloudLayout');\n\nvar _CloudLayout2 = _interopRequireDefault(_CloudLayout);\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _vegaScale = require('vega-scale');\n\nvar _vegaStatistics = require('vega-statistics');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];\n\nvar Params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];\n\nfunction Wordcloud(params) {\n  _vegaDataflow.Transform.call(this, (0, _CloudLayout2.default)(), params);\n}\n\nWordcloud.Definition = {\n  \"type\": \"Wordcloud\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 }, { \"name\": \"font\", \"type\": \"string\", \"expr\": true, \"default\": \"sans-serif\" }, { \"name\": \"fontStyle\", \"type\": \"string\", \"expr\": true, \"default\": \"normal\" }, { \"name\": \"fontWeight\", \"type\": \"string\", \"expr\": true, \"default\": \"normal\" }, { \"name\": \"fontSize\", \"type\": \"number\", \"expr\": true, \"default\": 14 }, { \"name\": \"fontSizeRange\", \"type\": \"number\", \"array\": \"nullable\", \"default\": [10, 50] }, { \"name\": \"rotate\", \"type\": \"number\", \"expr\": true, \"default\": 0 }, { \"name\": \"text\", \"type\": \"field\" }, { \"name\": \"spiral\", \"type\": \"string\", \"values\": [\"archimedean\", \"rectangular\"] }, { \"name\": \"padding\", \"type\": \"number\", \"expr\": true }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 7, \"default\": Output }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Wordcloud, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  function modp(param) {\n    var p = _[param];\n    return (0, _vegaUtil.isFunction)(p) && pulse.modified(p.fields);\n  }\n\n  var mod = _.modified();\n  if (!(mod || pulse.changed(pulse.ADD_REM) || Params.some(modp))) return;\n\n  var data = pulse.materialize(pulse.SOURCE).source,\n      layout = this.value,\n      as = _.as || Output,\n      fontSize = _.fontSize || 14,\n      range;\n\n  (0, _vegaUtil.isFunction)(fontSize) ? range = _.fontSizeRange : fontSize = (0, _vegaUtil.constant)(fontSize);\n\n  // create font size scaling function as needed\n  if (range) {\n    var fsize = fontSize,\n        sizeScale = (0, _vegaScale.scale)('sqrt')().domain(extent(fsize, data)).range(range);\n    fontSize = function (x) {\n      return sizeScale(fsize(x));\n    };\n  }\n\n  data.forEach(function (t) {\n    t[as[0]] = NaN;\n    t[as[1]] = NaN;\n    t[as[3]] = 0;\n  });\n\n  // configure layout\n  var words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(_vegaStatistics.random).layout();\n\n  var size = layout.size(),\n      dx = size[0] >> 1,\n      dy = size[1] >> 1,\n      i = 0,\n      n = words.length,\n      w,\n      t;\n\n  for (; i < n; ++i) {\n    w = words[i];\n    t = w.datum;\n    t[as[0]] = w.x + dx;\n    t[as[1]] = w.y + dy;\n    t[as[2]] = w.font;\n    t[as[3]] = w.size;\n    t[as[4]] = w.style;\n    t[as[5]] = w.weight;\n    t[as[6]] = w.rotate;\n  }\n\n  return pulse.reflow(mod).modifies(as);\n};\n\nfunction extent(field, data) {\n  var min = +Infinity,\n      max = -Infinity,\n      i = 0,\n      n = data.length,\n      v;\n\n  for (; i < n; ++i) {\n    v = field(data[i]);\n    if (v < min) min = v;\n    if (v > max) max = v;\n  }\n\n  return [min, max];\n}"},"hash":"514ac59cb1fed1c6d3d200701ed62b3c","cacheData":{"env":{}}}