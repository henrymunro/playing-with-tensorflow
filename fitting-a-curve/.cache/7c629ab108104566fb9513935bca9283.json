{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"./expression/codegen","loc":{"line":1,"column":43}},{"name":"vega-expression","loc":{"line":2,"column":20}},{"name":"vega-util","loc":{"line":3,"column":33}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signalPrefix = undefined;\n\nexports.default = function (expr, scope, preamble) {\n  var params = {},\n      ast,\n      gen;\n\n  // parse the expression to an abstract syntax tree (ast)\n  try {\n    ast = (0, _vegaExpression.parse)(expr);\n  } catch (err) {\n    (0, _vegaUtil.error)('Expression parse error: ' + (0, _vegaUtil.stringValue)(expr));\n  }\n\n  // analyze ast function calls for dependencies\n  ast.visit(function visitor(node) {\n    if (node.type !== 'CallExpression') return;\n    var name = node.callee.name,\n        visit = _codegen.codegenParams.visitors[name];\n    if (visit) visit(name, node.arguments, scope, params);\n  });\n\n  // perform code generation\n  gen = (0, _codegen.codeGenerator)(ast);\n\n  // collect signal dependencies\n  gen.globals.forEach(function (name) {\n    var signalName = signalPrefix + name;\n    if (!params.hasOwnProperty(signalName) && scope.getSignal(name)) {\n      params[signalName] = scope.signalRef(name);\n    }\n  });\n\n  // return generated expression code and dependencies\n  return {\n    $expr: preamble ? preamble + 'return(' + gen.code + ');' : gen.code,\n    $fields: gen.fields,\n    $params: params\n  };\n};\n\nvar _codegen = require('./expression/codegen');\n\nvar _vegaExpression = require('vega-expression');\n\nvar _vegaUtil = require('vega-util');\n\nvar signalPrefix = exports.signalPrefix = '$';"},"hash":"3e7faeddd9e1c53e07121ccf44419bbf","cacheData":{"env":{}}}