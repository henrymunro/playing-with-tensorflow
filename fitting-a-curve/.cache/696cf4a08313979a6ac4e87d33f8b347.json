{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-crossfilter/package.json","includedInParent":true,"mtime":1501881708000},{"name":"./arrays","loc":{"line":1,"column":39}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Bitmaps;\n\nvar _arrays = require('./arrays');\n\n/**\n * Maintains CrossFilter state.\n */\nfunction Bitmaps() {\n\n  var width = 8,\n      data = [],\n      seen = (0, _arrays.array32)(0),\n      curr = array(0, width),\n      prev = array(0, width);\n\n  return {\n\n    data: function () {\n      return data;\n    },\n\n    seen: function () {\n      return seen = lengthen(seen, data.length);\n    },\n\n    add: function (array) {\n      for (var i = 0, j = data.length, n = array.length, t; i < n; ++i) {\n        t = array[i];\n        t._index = j++;\n        data.push(t);\n      }\n    },\n\n    remove: function (num, map) {\n      // map: index -> boolean (true => remove)\n      var n = data.length,\n          copy = Array(n - num),\n          reindex = data,\n          // reuse old data array for index map\n      t,\n          i,\n          j;\n\n      // seek forward to first removal\n      for (i = 0; !map[i] && i < n; ++i) {\n        copy[i] = data[i];\n        reindex[i] = i;\n      }\n\n      // condense arrays\n      for (j = i; i < n; ++i) {\n        t = data[i];\n        if (!map[i]) {\n          reindex[i] = j;\n          curr[j] = curr[i];\n          prev[j] = prev[i];\n          copy[j] = t;\n          t._index = j++;\n        } else {\n          reindex[i] = -1;\n        }\n        curr[i] = 0; // clear unused bits\n      }\n\n      data = copy;\n      return reindex;\n    },\n\n    size: function () {\n      return data.length;\n    },\n\n    curr: function () {\n      return curr;\n    },\n\n    prev: function () {\n      return prev;\n    },\n\n    reset: function (k) {\n      prev[k] = curr[k];\n    },\n\n    all: function () {\n      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;\n    },\n\n    set: function (k, one) {\n      curr[k] |= one;\n    },\n\n    clear: function (k, one) {\n      curr[k] &= ~one;\n    },\n\n    resize: function (n, m) {\n      var k = curr.length;\n      if (n > k || m > width) {\n        width = Math.max(m, width);\n        curr = array(n, width, curr);\n        prev = array(n, width);\n      }\n    }\n  };\n}\n\nfunction lengthen(array, length, copy) {\n  if (array.length >= length) return array;\n  copy = copy || new array.constructor(length);\n  copy.set(array);\n  return copy;\n}\n\nfunction array(n, m, array) {\n  var copy = (m < 0x101 ? _arrays.array8 : m < 0x10001 ? _arrays.array16 : _arrays.array32)(n);\n  if (array) copy.set(array);\n  return copy;\n}"},"hash":"ad70abed93067dbc0cfe7c71ce0beefe","cacheData":{"env":{}}}