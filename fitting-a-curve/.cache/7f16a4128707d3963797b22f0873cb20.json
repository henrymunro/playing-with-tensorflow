{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-dataflow/package.json","includedInParent":true,"mtime":1518291445000},{"name":"./Tuple","loc":{"line":1,"column":30}},{"name":"vega-util","loc":{"line":2,"column":42}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isChangeSet = isChangeSet;\nexports.default = changeset;\n\nvar _Tuple = require('./Tuple');\n\nvar _vegaUtil = require('vega-util');\n\nfunction isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\n\nfunction changeset() {\n  var add = [],\n      // insert tuples\n  rem = [],\n      // remove tuples\n  mod = [],\n      // modify tuples\n  remp = [],\n      // remove by predicate\n  modp = [],\n      // modify by predicate\n  reflow = false;\n\n  return {\n    constructor: changeset,\n    insert: function (t) {\n      var d = (0, _vegaUtil.array)(t),\n          i = 0,\n          n = d.length;\n      for (; i < n; ++i) add.push(d[i]);\n      return this;\n    },\n    remove: function (t) {\n      var a = (0, _vegaUtil.isFunction)(t) ? remp : rem,\n          d = (0, _vegaUtil.array)(t),\n          i = 0,\n          n = d.length;\n      for (; i < n; ++i) a.push(d[i]);\n      return this;\n    },\n    modify: function (t, field, value) {\n      var m = { field: field, value: (0, _vegaUtil.constant)(value) };\n      if ((0, _vegaUtil.isFunction)(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n      return this;\n    },\n    encode: function (t, set) {\n      if ((0, _vegaUtil.isFunction)(t)) modp.push({ filter: t, field: set });else mod.push({ tuple: t, field: set });\n      return this;\n    },\n    reflow: function () {\n      reflow = true;\n      return this;\n    },\n    pulse: function (pulse, tuples) {\n      var out, i, n, m, f, t, id;\n\n      // add\n      for (i = 0, n = add.length; i < n; ++i) {\n        pulse.add.push((0, _Tuple.ingest)(add[i]));\n      }\n\n      // remove\n      for (out = {}, i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        out[(0, _Tuple.tupleid)(t)] = t;\n      }\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(function (t) {\n          if (f(t)) out[(0, _Tuple.tupleid)(t)] = t;\n        });\n      }\n      for (id in out) pulse.rem.push(out[id]);\n\n      // modify\n      function modify(t, f, v) {\n        if (v) t[f] = v(t);else pulse.encode = f;\n        if (!reflow) out[(0, _Tuple.tupleid)(t)] = t;\n      }\n      for (out = {}, i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        modify(m.tuple, m.field, m.value);\n        pulse.modifies(m.field);\n      }\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(function (t) {\n          if (f(t)) modify(t, m.field, m.value);\n        });\n        pulse.modifies(m.field);\n      }\n\n      // reflow?\n      if (reflow) {\n        pulse.mod = rem.length || remp.length ? tuples.filter(function (t) {\n          return out.hasOwnProperty((0, _Tuple.tupleid)(t));\n        }) : tuples.slice();\n      } else {\n        for (id in out) pulse.mod.push(out[id]);\n      }\n\n      return pulse;\n    }\n  };\n}"},"hash":"abdaac3dc0a9d47a2e0372cad3dc3b7f","cacheData":{"env":{}}}