{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-view/package.json","includedInParent":true,"mtime":1520276980000},{"name":"./cursor","loc":{"line":1,"column":19}},{"name":"./data","loc":{"line":2,"column":43}},{"name":"./events","loc":{"line":3,"column":44}},{"name":"./hover","loc":{"line":4,"column":18}},{"name":"./finalize","loc":{"line":5,"column":21}},{"name":"./initialize","loc":{"line":6,"column":23}},{"name":"./render-to-image-url","loc":{"line":7,"column":29}},{"name":"./render-to-canvas","loc":{"line":8,"column":27}},{"name":"./render-to-svg","loc":{"line":9,"column":24}},{"name":"./render-size","loc":{"line":10,"column":29}},{"name":"./runtime","loc":{"line":11,"column":20}},{"name":"./size","loc":{"line":12,"column":66}},{"name":"./state","loc":{"line":13,"column":33}},{"name":"vega-dataflow","loc":{"line":15,"column":23}},{"name":"vega-util","loc":{"line":16,"column":51}},{"name":"vega-scenegraph","loc":{"line":20,"column":7}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = View;\n\nvar _cursor = require('./cursor');\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _data = require('./data');\n\nvar _events = require('./events');\n\nvar _hover = require('./hover');\n\nvar _hover2 = _interopRequireDefault(_hover);\n\nvar _finalize = require('./finalize');\n\nvar _finalize2 = _interopRequireDefault(_finalize);\n\nvar _initialize = require('./initialize');\n\nvar _initialize2 = _interopRequireDefault(_initialize);\n\nvar _renderToImageUrl = require('./render-to-image-url');\n\nvar _renderToImageUrl2 = _interopRequireDefault(_renderToImageUrl);\n\nvar _renderToCanvas = require('./render-to-canvas');\n\nvar _renderToCanvas2 = _interopRequireDefault(_renderToCanvas);\n\nvar _renderToSvg = require('./render-to-svg');\n\nvar _renderToSvg2 = _interopRequireDefault(_renderToSvg);\n\nvar _renderSize = require('./render-size');\n\nvar _runtime = require('./runtime');\n\nvar _runtime2 = _interopRequireDefault(_runtime);\n\nvar _size = require('./size');\n\nvar _state = require('./state');\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _vegaScenegraph = require('vega-scenegraph');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a new View instance from a Vega dataflow runtime specification.\n * The generated View will not immediately be ready for display. Callers\n * should also invoke the initialize method (e.g., to set the parent\n * DOM element in browser-based deployment) and then invoke the run\n * method to evaluate the dataflow graph. Rendering will automatically\n * be peformed upon dataflow runs.\n * @constructor\n * @param {object} spec - The Vega dataflow runtime specification.\n */\nfunction View(spec, options) {\n  var view = this;\n  options = options || {};\n\n  _vegaDataflow.Dataflow.call(view);\n  view.loader(options.loader || view._loader);\n  view.logLevel(options.logLevel || 0);\n\n  view._el = null;\n  view._renderType = options.renderer || _vegaScenegraph.RenderType.Canvas;\n  view._scenegraph = new _vegaScenegraph.Scenegraph();\n  var root = view._scenegraph.root;\n\n  // initialize renderer, handler and event management\n  view._renderer = null;\n  view._redraw = true;\n  view._handler = new _vegaScenegraph.CanvasHandler().scene(root);\n  view._preventDefault = false;\n  view._eventListeners = [];\n  view._resizeListeners = [];\n\n  // initialize dataflow graph\n  var ctx = (0, _runtime2.default)(view, spec, options.functions);\n  view._runtime = ctx;\n  view._signals = ctx.signals;\n  view._bind = (spec.bindings || []).map(function (_) {\n    return {\n      state: null,\n      param: (0, _vegaUtil.extend)({}, _)\n    };\n  });\n\n  // initialize scenegraph\n  if (ctx.root) ctx.root.set(root);\n  root.source = ctx.data.root.input;\n  view.pulse(ctx.data.root.input, view.changeset().insert(root.items));\n\n  // initialize background color\n  view._background = ctx.background || null;\n\n  // initialize event configuration\n  view._eventConfig = (0, _events.initializeEventConfig)(ctx.eventConfig);\n\n  // initialize view size\n  view._width = view.width();\n  view._height = view.height();\n  view._viewWidth = (0, _size.viewWidth)(view, view._width);\n  view._viewHeight = (0, _size.viewHeight)(view, view._height);\n  view._origin = [0, 0];\n  view._resize = 0;\n  view._autosize = 1;\n  (0, _size.initializeResize)(view);\n\n  // initialize cursor\n  (0, _cursor2.default)(view);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(View, _vegaDataflow.Dataflow);\n\n// -- DATAFLOW / RENDERING ----\n\nprototype.run = function (encode) {\n  _vegaDataflow.Dataflow.prototype.run.call(this, encode);\n  if (this._redraw || this._resize) {\n    try {\n      this.render();\n    } catch (e) {\n      this.error(e);\n    }\n  }\n  return this;\n};\n\nprototype.render = function () {\n  if (this._renderer) {\n    if (this._resize) {\n      this._resize = 0;\n      (0, _renderSize.resizeRenderer)(this);\n    }\n    this._renderer.render(this._scenegraph.root);\n  }\n  this._redraw = false;\n  return this;\n};\n\nprototype.dirty = function (item) {\n  this._redraw = true;\n  this._renderer && this._renderer.dirty(item);\n};\n\n// -- GET / SET ----\n\nprototype.container = function () {\n  return this._el;\n};\n\nprototype.scenegraph = function () {\n  return this._scenegraph;\n};\n\nfunction lookupSignal(view, name) {\n  return view._signals.hasOwnProperty(name) ? view._signals[name] : (0, _vegaUtil.error)('Unrecognized signal name: ' + (0, _vegaUtil.stringValue)(name));\n}\n\nprototype.signal = function (name, value, options) {\n  var op = lookupSignal(this, name);\n  return arguments.length === 1 ? op.value : this.update(op, value, options);\n};\n\nprototype.background = function (_) {\n  if (arguments.length) {\n    this._background = _;\n    this._resize = 1;\n    return this;\n  } else {\n    return this._background;\n  }\n};\n\nprototype.width = function (_) {\n  return arguments.length ? this.signal('width', _) : this.signal('width');\n};\n\nprototype.height = function (_) {\n  return arguments.length ? this.signal('height', _) : this.signal('height');\n};\n\nprototype.padding = function (_) {\n  return arguments.length ? this.signal('padding', _) : this.signal('padding');\n};\n\nprototype.autosize = function (_) {\n  return arguments.length ? this.signal('autosize', _) : this.signal('autosize');\n};\n\nprototype.renderer = function (type) {\n  if (!arguments.length) return this._renderType;\n  if (!(0, _vegaScenegraph.renderModule)(type)) (0, _vegaUtil.error)('Unrecognized renderer type: ' + type);\n  if (type !== this._renderType) {\n    this._renderType = type;\n    if (this._renderer) {\n      this._renderer = null;\n      this.initialize(this._el);\n    }\n  }\n  return this;\n};\n\nprototype.loader = function (loader) {\n  if (!arguments.length) return this._loader;\n  if (loader !== this._loader) {\n    _vegaDataflow.Dataflow.prototype.loader.call(this, loader);\n    if (this._renderer) {\n      this._renderer = null;\n      this.initialize(this._el);\n    }\n  }\n  return this;\n};\n\nprototype.resize = function () {\n  this._autosize = 1;\n  return this;\n};\n\n// -- SIZING ----\nprototype._resizeView = _size.resizeView;\n\n// -- EVENT HANDLING ----\n\nprototype.addEventListener = function (type, handler) {\n  this._handler.on(type, handler);\n  return this;\n};\n\nprototype.removeEventListener = function (type, handler) {\n  this._handler.off(type, handler);\n  return this;\n};\n\nprototype.addResizeListener = function (handler) {\n  var l = this._resizeListeners;\n  if (l.indexOf(handler) < 0) {\n    // add handler if it isn't already registered\n    l.push(handler);\n  }\n  return this;\n};\n\nprototype.removeResizeListener = function (handler) {\n  var l = this._resizeListeners,\n      i = l.indexOf(handler);\n  if (i >= 0) {\n    l.splice(i, 1);\n  }\n  return this;\n};\n\nfunction findHandler(signal, handler) {\n  var t = signal._targets || [],\n      h = t.filter(function (op) {\n    var u = op._update;\n    return u && u.handler === handler;\n  });\n  return h.length ? h[0] : null;\n}\n\nprototype.addSignalListener = function (name, handler) {\n  var s = lookupSignal(this, name),\n      h = findHandler(s, handler);\n\n  if (!h) {\n    h = function () {\n      handler(name, s.value);\n    };\n    h.handler = handler;\n    this.on(s, null, h);\n  }\n  return this;\n};\n\nprototype.removeSignalListener = function (name, handler) {\n  var s = lookupSignal(this, name),\n      h = findHandler(s, handler);\n\n  if (h) s._targets.remove(h);\n  return this;\n};\n\nprototype.preventDefault = function (_) {\n  if (arguments.length) {\n    this._preventDefault = _;\n    return this;\n  } else {\n    return this._preventDefault;\n  }\n};\n\nprototype.tooltipHandler = function (_) {\n  var h = this._handler;\n  if (!arguments.length) {\n    return h.handleTooltip;\n  } else {\n    h.handleTooltip = _ || _vegaScenegraph.Handler.prototype.handleTooltip;\n    return this;\n  }\n};\n\nprototype.events = _events.events;\nprototype.finalize = _finalize2.default;\nprototype.hover = _hover2.default;\n\n// -- DATA ----\nprototype.data = _data.data;\nprototype.change = _data.change;\nprototype.insert = _data.insert;\nprototype.remove = _data.remove;\n\n// -- INITIALIZATION ----\nprototype.initialize = _initialize2.default;\n\n// -- HEADLESS RENDERING ----\nprototype.toImageURL = _renderToImageUrl2.default;\nprototype.toCanvas = _renderToCanvas2.default;\nprototype.toSVG = _renderToSvg2.default;\n\n// -- SAVE / RESTORE STATE ----\nprototype.getState = _state.getState;\nprototype.setState = _state.setState;"},"hash":"4d69f8818439b3ed539cede95200c970","cacheData":{"env":{}}}