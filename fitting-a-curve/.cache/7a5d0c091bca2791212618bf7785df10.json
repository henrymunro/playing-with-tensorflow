{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"d3-geo","loc":{"line":5,"column":7}},{"name":"./scale","loc":{"line":6,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.geoCentroid = exports.geoBounds = exports.geoArea = undefined;\n\nvar _d3Geo = require('d3-geo');\n\nvar _scale = require('./scale');\n\nfunction geoMethod(methodName, globalMethod) {\n  return function (projection, geojson, group) {\n    if (projection) {\n      // projection defined, use it\n      var p = (0, _scale.getScale)(projection, (group || this).context);\n      return p && p.path[methodName](geojson);\n    } else {\n      // projection undefined, use global method\n      return globalMethod(geojson);\n    }\n  };\n}\n\nvar geoArea = exports.geoArea = geoMethod('area', _d3Geo.geoArea);\nvar geoBounds = exports.geoBounds = geoMethod('bounds', _d3Geo.geoBounds);\nvar geoCentroid = exports.geoCentroid = geoMethod('centroid', _d3Geo.geoCentroid);"},"hash":"fc9da9adbd3cf9a78d7a937ef5c2528e","cacheData":{"env":{}}}