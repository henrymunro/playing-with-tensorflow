{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-geo/package.json","includedInParent":true,"mtime":1518585631000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GeoPoint;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Geo-code a longitude/latitude point to an x/y coordinate.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {Array<function(object): *>} params.fields - A two-element array of\n *   field accessors for the longitude and latitude values.\n * @param {Array<string>} [params.as] - A two-element array of field names\n *   under which to store the result. Defaults to ['x','y'].\n */\nfunction GeoPoint(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nGeoPoint.Definition = {\n  \"type\": \"GeoPoint\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"projection\", \"type\": \"projection\", \"required\": true }, { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true, \"length\": 2 }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"x\", \"y\"] }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(GeoPoint, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var proj = _.projection,\n      lon = _.fields[0],\n      lat = _.fields[1],\n      as = _.as || ['x', 'y'],\n      x = as[0],\n      y = as[1],\n      mod;\n\n  function set(t) {\n    var xy = proj([lon(t), lat(t)]);\n    if (xy) {\n      t[x] = xy[0];\n      t[y] = xy[1];\n    } else {\n      t[x] = undefined;\n      t[y] = undefined;\n    }\n  }\n\n  if (_.modified()) {\n    // parameters updated, reflow\n    pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n  } else {\n    mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n    pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n  }\n\n  return pulse.modifies(as);\n};"},"hash":"5d6b14475d26782816768aab72958760","cacheData":{"env":{}}}