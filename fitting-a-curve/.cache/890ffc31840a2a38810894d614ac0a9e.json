{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-encode/package.json","includedInParent":true,"mtime":1520281405000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":28}},{"name":"d3-array","loc":{"line":3,"column":25}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Pie;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Array = require('d3-array');\n\n/**\n * Pie and donut chart layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size pie segments.\n * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.\n * @param {number} [params.endAngle=2Ï€] - The end angle (in radians) of the layout.\n * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.\n */\nfunction Pie(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nPie.Definition = {\n  \"type\": \"Pie\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"field\", \"type\": \"field\" }, { \"name\": \"startAngle\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"endAngle\", \"type\": \"number\", \"default\": 6.283185307179586 }, { \"name\": \"sort\", \"type\": \"boolean\", \"default\": false }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"startAngle\", \"endAngle\"] }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Pie, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var as = _.as || ['startAngle', 'endAngle'],\n      startAngle = as[0],\n      endAngle = as[1],\n      field = _.field || _vegaUtil.one,\n      start = _.startAngle || 0,\n      stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,\n      data = pulse.source,\n      values = data.map(field),\n      n = values.length,\n      a = start,\n      k = (stop - start) / (0, _d3Array.sum)(values),\n      index = (0, _d3Array.range)(n),\n      i,\n      t,\n      v;\n\n  if (_.sort) {\n    index.sort(function (a, b) {\n      return values[a] - values[b];\n    });\n  }\n\n  for (i = 0; i < n; ++i) {\n    v = values[index[i]];\n    t = data[index[i]];\n    t[startAngle] = a;\n    t[endAngle] = a += v * k;\n  }\n\n  this.value = values;\n  return pulse.reflow(_.modified()).modifies(as);\n};"},"hash":"ce34a110a11a96946ad65edfbbef96f5","cacheData":{"env":{}}}