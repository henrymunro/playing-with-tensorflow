{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"./expression","loc":{"line":1,"column":28}},{"name":"vega-util","loc":{"line":2,"column":40}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (stream, scope) {\n  return stream.signal ? scope.getSignal(stream.signal).id : stream.scale ? scope.getScale(stream.scale).id : parseStream(stream, scope);\n};\n\nvar _expression = require('./expression');\n\nvar _expression2 = _interopRequireDefault(_expression);\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar VIEW = 'view',\n    SCOPE = 'scope';\n\nfunction eventSource(source) {\n  return source === SCOPE ? VIEW : source || VIEW;\n}\n\nfunction parseStream(stream, scope) {\n  var method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : (0, _vegaUtil.error)('Invalid stream specification: ' + (0, _vegaUtil.stringValue)(stream));\n\n  return method(stream, scope);\n}\n\nfunction mergeStream(stream, scope) {\n  var list = stream.merge.map(function (s) {\n    return parseStream(s, scope);\n  });\n\n  var entry = streamParameters({ merge: list }, stream, scope);\n  return scope.addStream(entry).id;\n}\n\nfunction nestedStream(stream, scope) {\n  var id = parseStream(stream.stream, scope),\n      entry = streamParameters({ stream: id }, stream, scope);\n  return scope.addStream(entry).id;\n}\n\nfunction eventStream(stream, scope) {\n  var id = scope.event(eventSource(stream.source), stream.type),\n      entry = streamParameters({ stream: id }, stream, scope);\n  return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;\n}\n\nfunction streamParameters(entry, stream, scope) {\n  var param = stream.between;\n\n  if (param) {\n    if (param.length !== 2) {\n      (0, _vegaUtil.error)('Stream \"between\" parameter must have 2 entries: ' + (0, _vegaUtil.stringValue)(stream));\n    }\n    entry.between = [parseStream(param[0], scope), parseStream(param[1], scope)];\n  }\n\n  param = stream.filter ? (0, _vegaUtil.array)(stream.filter) : [];\n  if (stream.marktype || stream.markname || stream.markrole) {\n    // add filter for mark type, name and/or role\n    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));\n  }\n  if (stream.source === SCOPE) {\n    // add filter to limit events from sub-scope only\n    param.push('inScope(event.item)');\n  }\n  if (param.length) {\n    entry.filter = (0, _expression2.default)('(' + param.join(')&&(') + ')').$expr;\n  }\n\n  if ((param = stream.throttle) != null) {\n    entry.throttle = +param;\n  }\n\n  if ((param = stream.debounce) != null) {\n    entry.debounce = +param;\n  }\n\n  if (stream.consume) {\n    entry.consume = true;\n  }\n\n  return entry;\n}\n\nfunction filterMark(type, name, role) {\n  var item = 'event.item';\n  return item + (type && type !== '*' ? '&&' + item + '.mark.marktype===\\'' + type + '\\'' : '') + (role ? '&&' + item + '.mark.role===\\'' + role + '\\'' : '') + (name ? '&&' + item + '.mark.name===\\'' + name + '\\'' : '');\n}"},"hash":"4feea046f1f6876bd53946247e1a7f88","cacheData":{"env":{}}}