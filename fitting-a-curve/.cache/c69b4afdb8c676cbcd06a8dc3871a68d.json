{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"./util/util","loc":{"line":1,"column":25}},{"name":"vega-dataflow","loc":{"line":2,"column":51}},{"name":"vega-util","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Project;\n\nvar _util = require('./util/util');\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\nfunction Project(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nProject.Definition = {\n  \"type\": \"Project\",\n  \"metadata\": { \"generates\": true, \"changes\": true, \"modifies\": true },\n  \"params\": [{ \"name\": \"fields\", \"type\": \"field\", \"array\": true }, { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Project, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var fields = _.fields,\n      as = (0, _util.fieldNames)(_.fields, _.as || []),\n      derive = fields ? function (s, t) {\n    return project(s, t, fields, as);\n  } : _vegaDataflow.rederive,\n      out,\n      lut;\n\n  if (this.value) {\n    lut = this.value;\n  } else {\n    pulse = pulse.addAll();\n    lut = this.value = {};\n  }\n\n  out = pulse.fork(pulse.NO_SOURCE);\n\n  pulse.visit(pulse.REM, function (t) {\n    var id = (0, _vegaDataflow.tupleid)(t);\n    out.rem.push(lut[id]);\n    lut[id] = null;\n  });\n\n  pulse.visit(pulse.ADD, function (t) {\n    var dt = derive(t, (0, _vegaDataflow.ingest)({}));\n    lut[(0, _vegaDataflow.tupleid)(t)] = dt;\n    out.add.push(dt);\n  });\n\n  pulse.visit(pulse.MOD, function (t) {\n    out.mod.push(derive(t, lut[(0, _vegaDataflow.tupleid)(t)]));\n  });\n\n  return out;\n};\n\nfunction project(s, t, fields, as) {\n  for (var i = 0, n = fields.length; i < n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n  return t;\n}"},"hash":"ffaa4594454fd2f256d071972f6d6bfb","cacheData":{"env":{}}}