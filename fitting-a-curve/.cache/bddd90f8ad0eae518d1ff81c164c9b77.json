{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-view/package.json","includedInParent":true,"mtime":1520276980000},{"name":"./events-extend","loc":{"line":1,"column":24}},{"name":"vega-dataflow","loc":{"line":2,"column":26}},{"name":"vega-util","loc":{"line":3,"column":37}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initializeEventConfig = initializeEventConfig;\nexports.events = events;\n\nvar _eventsExtend = require('./events-extend');\n\nvar _eventsExtend2 = _interopRequireDefault(_eventsExtend);\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar VIEW = 'view',\n    WINDOW = 'window';\n\n/**\n * Initialize event handling configuration.\n * @param {object} config - The configuration settings.\n * @return {object}\n */\nfunction initializeEventConfig(config) {\n  config = (0, _vegaUtil.extend)({}, config);\n\n  var def = config.defaults;\n  if (def) {\n    if ((0, _vegaUtil.isArray)(def.prevent)) {\n      def.prevent = (0, _vegaUtil.toSet)(def.prevent);\n    }\n    if ((0, _vegaUtil.isArray)(def.allow)) {\n      def.allow = (0, _vegaUtil.toSet)(def.allow);\n    }\n  }\n\n  return config;\n}\n\nfunction prevent(view, type) {\n  var def = view._eventConfig.defaults,\n      prevent = def && def.prevent,\n      allow = def && def.allow;\n\n  return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();\n}\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @return {EventStream}\n */\nfunction events(source, type, filter) {\n  var view = this,\n      s = new _vegaDataflow.EventStream(filter),\n      send = function (e, item) {\n    if (source === VIEW && prevent(view, type)) {\n      e.preventDefault();\n    }\n    try {\n      s.receive((0, _eventsExtend2.default)(view, e, item));\n    } catch (error) {\n      view.error(error);\n    } finally {\n      view.run();\n    }\n  },\n      sources;\n\n  if (source === VIEW) {\n    view.addEventListener(type, send);\n    return s;\n  }\n\n  if (source === WINDOW) {\n    if (typeof window !== 'undefined') sources = [window];\n  } else if (typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  }\n\n  if (!sources) {\n    view.warn('Can not resolve event source: ' + source);\n    return s;\n  }\n\n  for (var i = 0, n = sources.length; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  view._eventListeners.push({\n    type: type,\n    sources: sources,\n    handler: send\n  });\n\n  return s;\n}"},"hash":"78acc09cd4bdcc63ce554c8d8184bc14","cacheData":{"env":{}}}