{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"vega-util","loc":{"line":1,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Descending = exports.Ascending = exports.keyFieldRef = exports.tupleidRef = undefined;\nexports.Entry = Entry;\nexports.entry = entry;\nexports.operator = operator;\nexports.ref = ref;\nexports.fieldRef = fieldRef;\nexports.compareRef = compareRef;\nexports.keyRef = keyRef;\nexports.sortKey = sortKey;\nexports.aggrField = aggrField;\nexports.isSignal = isSignal;\nexports.value = value;\n\nvar _vegaUtil = require('vega-util');\n\nfunction Entry(type, value, params, parent) {\n  this.id = -1;\n  this.type = type;\n  this.value = value;\n  this.params = params;\n  if (parent) this.parent = parent;\n}\n\nfunction entry(type, value, params, parent) {\n  return new Entry(type, value, params, parent);\n}\n\nfunction operator(value, params) {\n  return entry('operator', value, params);\n}\n\n// -----\n\nfunction ref(op) {\n  var ref = { $ref: op.id };\n  // if operator not yet registered, cache ref to resolve later\n  if (op.id < 0) (op.refs = op.refs || []).push(ref);\n  return ref;\n}\n\nvar tupleidRef = exports.tupleidRef = {\n  $tupleid: 1,\n  toString: function () {\n    return ':_tupleid_:';\n  }\n};\n\nfunction fieldRef(field, name) {\n  return name ? { $field: field, $name: name } : { $field: field };\n}\n\nvar keyFieldRef = exports.keyFieldRef = fieldRef('key');\n\nfunction compareRef(fields, orders) {\n  return { $compare: fields, $order: orders };\n}\n\nfunction keyRef(fields, flat) {\n  var ref = { $key: fields };\n  if (flat) ref.$flat = true;\n  return ref;\n}\n\n// -----\n\nvar Ascending = exports.Ascending = 'ascending';\n\nvar Descending = exports.Descending = 'descending';\n\nfunction sortKey(sort) {\n  return !(0, _vegaUtil.isObject)(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);\n}\n\nfunction aggrField(op, field) {\n  return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');\n}\n\n// -----\n\nfunction isSignal(_) {\n  return _ && _.signal;\n}\n\nfunction value(specValue, defaultValue) {\n  return specValue != null ? specValue : defaultValue;\n}"},"hash":"6b22d02bb451b5cf88f26a3ddd54c0c3","cacheData":{"env":{}}}