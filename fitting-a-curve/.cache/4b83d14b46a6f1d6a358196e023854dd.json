{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/d3-scale/package.json","includedInParent":true,"mtime":1517166165000},{"name":"d3-array","loc":{"line":1,"column":35}},{"name":"d3-interpolate","loc":{"line":2,"column":49}},{"name":"./continuous","loc":{"line":3,"column":80}},{"name":"./tickFormat","loc":{"line":4,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.linearish = linearish;\nexports.default = linear;\n\nvar _d3Array = require(\"d3-array\");\n\nvar _d3Interpolate = require(\"d3-interpolate\");\n\nvar _continuous = require(\"./continuous\");\n\nvar _continuous2 = _interopRequireDefault(_continuous);\n\nvar _tickFormat = require(\"./tickFormat\");\n\nvar _tickFormat2 = _interopRequireDefault(_tickFormat);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function (count) {\n    var d = domain();\n    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    return (0, _tickFormat2.default)(domain(), count, specifier);\n  };\n\n  scale.nice = function (count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = (0, _d3Array.tickIncrement)(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = (0, _d3Array.tickIncrement)(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = (0, _d3Array.tickIncrement)(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear() {\n  var scale = (0, _continuous2.default)(_continuous.deinterpolateLinear, _d3Interpolate.interpolateNumber);\n\n  scale.copy = function () {\n    return (0, _continuous.copy)(scale, linear());\n  };\n\n  return linearish(scale);\n}"},"hash":"ebbe9f12a4731b7ba4bcab9f335447d4","cacheData":{"env":{}}}