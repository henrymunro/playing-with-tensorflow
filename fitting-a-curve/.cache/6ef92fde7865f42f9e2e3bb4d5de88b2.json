{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-view/package.json","includedInParent":true,"mtime":1520276980000},{"name":"./render-headless","loc":{"line":1,"column":27}},{"name":"vega-scenegraph","loc":{"line":2,"column":33}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (type, scaleFactor) {\n  return type !== _vegaScenegraph.RenderType.Canvas && type !== _vegaScenegraph.RenderType.SVG && type !== _vegaScenegraph.RenderType.PNG ? Promise.reject('Unrecognized image type: ' + type) : (0, _renderHeadless2.default)(this, type, scaleFactor).then(function (renderer) {\n    return type === _vegaScenegraph.RenderType.SVG ? toBlobURL(renderer.svg(), 'image/svg+xml') : renderer.canvas().toDataURL('image/png');\n  });\n};\n\nvar _renderHeadless = require('./render-headless');\n\nvar _renderHeadless2 = _interopRequireDefault(_renderHeadless);\n\nvar _vegaScenegraph = require('vega-scenegraph');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toBlobURL(data, mime) {\n  var blob = new Blob([data], { type: mime });\n  return window.URL.createObjectURL(blob);\n}\n\n/**\n * Produce an image URL for the visualization. Depending on the type\n * parameter, the generated URL contains data for either a PNG or SVG image.\n * The URL can be used (for example) to download images of the visualization.\n * This method is asynchronous, returning a Promise instance.\n * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n *   The 'canvas' and 'png' types are synonyms for a PNG image.\n * @return {Promise} - A promise that resolves to an image URL.\n */"},"hash":"b27ecb19fe08fc6b379a618b0e0dca3c","cacheData":{"env":{}}}