{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-encode/package.json","includedInParent":true,"mtime":1520281405000},{"name":"./scale-types","loc":{"line":1,"column":67}},{"name":"./ticks","loc":{"line":2,"column":25}},{"name":"vega-util","loc":{"line":3,"column":19}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.labelValues = labelValues;\nexports.labelFormat = labelFormat;\n\nvar _scaleTypes = require('./scale-types');\n\nvar _ticks = require('./ticks');\n\nvar _vegaUtil = require('vega-util');\n\nvar discrete = {};\ndiscrete[_scaleTypes.Quantile] = quantile;\ndiscrete[_scaleTypes.Quantize] = quantize;\ndiscrete[_scaleTypes.Threshold] = threshold;\ndiscrete[_scaleTypes.BinLinear] = bin;\ndiscrete[_scaleTypes.BinOrdinal] = bin;\n\nfunction labelValues(scale, count, gradient) {\n  if (gradient) return scale.domain();\n  var values = discrete[scale.type];\n  return values ? values(scale) : (0, _ticks.tickValues)(scale, count);\n}\n\nfunction quantize(scale) {\n  var domain = scale.domain(),\n      x0 = domain[0],\n      x1 = (0, _vegaUtil.peek)(domain),\n      n = scale.range().length,\n      values = new Array(n),\n      i = 0;\n\n  values[0] = -Infinity;\n  while (++i < n) values[i] = (i * x1 - (i - n) * x0) / n;\n  values.max = +Infinity;\n\n  return values;\n}\n\nfunction quantile(scale) {\n  var values = [-Infinity].concat(scale.quantiles());\n  values.max = +Infinity;\n\n  return values;\n}\n\nfunction threshold(scale) {\n  var values = [-Infinity].concat(scale.domain());\n  values.max = +Infinity;\n\n  return values;\n}\n\nfunction bin(scale) {\n  var values = scale.domain();\n  values.max = values.pop();\n\n  return values;\n}\n\nfunction labelFormat(scale, format) {\n  return discrete[scale.type] ? formatRange(format) : formatPoint(format);\n}\n\nfunction formatRange(format) {\n  return function (value, index, array) {\n    var limit = array[index + 1] || array.max || +Infinity,\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n    return lo && hi ? lo + '\\u2013' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n}\n\nfunction formatValue(value, format) {\n  return isFinite(value) ? format(value) : null;\n}\n\nfunction formatPoint(format) {\n  return function (value) {\n    return format(value);\n  };\n}"},"hash":"4cb8497bdebc578179641bca176d469e","cacheData":{"env":{}}}