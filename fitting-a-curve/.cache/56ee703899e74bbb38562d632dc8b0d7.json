{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"babel-runtime/regenerator"},{"name":"babel-runtime/core-js/array/from"},{"name":"babel-runtime/helpers/asyncToGenerator"},{"name":"vega-embed","loc":{"line":18,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.plotDataAndPredictions = exports.plotData = undefined;\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _from = require(\"babel-runtime/core-js/array/from\");\n\nvar _from2 = _interopRequireDefault(_from);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar plotData = exports.plotData = function () {\n  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(container, xs, ys) {\n    var xvals, yvals, values, spec;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return xs.data();\n\n          case 2:\n            xvals = _context.sent;\n            _context.next = 5;\n            return ys.data();\n\n          case 5:\n            yvals = _context.sent;\n            values = (0, _from2.default)(yvals).map(function (y, i) {\n              return { x: xvals[i], y: yvals[i] };\n            });\n            spec = {\n              $schema: \"https://vega.github.io/schema/vega-lite/v2.json\",\n              width: 300,\n              height: 300,\n              data: { values: values },\n              mark: \"point\",\n              encoding: {\n                x: { field: \"x\", type: \"quantitative\" },\n                y: { field: \"y\", type: \"quantitative\" }\n              }\n            };\n            return _context.abrupt(\"return\", (0, _vegaEmbed2.default)(container, spec, { actions: false }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function plotData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}(); /**\n      * @license\n      * Copyright 2018 Google LLC. All Rights Reserved.\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      * http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      * =============================================================================\n      */\n\nvar plotDataAndPredictions = exports.plotDataAndPredictions = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(container, xs, ys, preds) {\n    var xvals, yvals, predVals, values, spec;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return xs.data();\n\n          case 2:\n            xvals = _context2.sent;\n            _context2.next = 5;\n            return ys.data();\n\n          case 5:\n            yvals = _context2.sent;\n            _context2.next = 8;\n            return preds.data();\n\n          case 8:\n            predVals = _context2.sent;\n            values = (0, _from2.default)(yvals).map(function (y, i) {\n              return { x: xvals[i], y: yvals[i], pred: predVals[i] };\n            });\n            spec = {\n              $schema: \"https://vega.github.io/schema/vega-lite/v2.json\",\n              width: 300,\n              height: 300,\n              data: { values: values },\n              layer: [{\n                mark: \"point\",\n                encoding: {\n                  x: { field: \"x\", type: \"quantitative\" },\n                  y: { field: \"y\", type: \"quantitative\" }\n                }\n              }, {\n                mark: \"line\",\n                encoding: {\n                  x: { field: \"x\", type: \"quantitative\" },\n                  y: { field: \"pred\", type: \"quantitative\" },\n                  color: { value: \"tomato\" }\n                }\n              }]\n            };\n            return _context2.abrupt(\"return\", (0, _vegaEmbed2.default)(container, spec, { actions: false }));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function plotDataAndPredictions(_x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.renderCoefficients = renderCoefficients;\n\nvar _vegaEmbed = require(\"vega-embed\");\n\nvar _vegaEmbed2 = _interopRequireDefault(_vegaEmbed);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction renderCoefficients(container, coeff, n) {\n  document.querySelector(container).innerHTML = \"<span>N=\" + n + \", a=\" + coeff.a.toFixed(3) + \", b=\" + coeff.b.toFixed(3) + \", c=\" + coeff.c.toFixed(3) + \",  d=\" + coeff.d.toFixed(3) + \"</span>\";\n}"},"hash":"436688eaf9682efe5adc1d05bb562c41","cacheData":{"env":{}}}