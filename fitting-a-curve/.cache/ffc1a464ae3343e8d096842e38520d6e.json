{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/topojson-client/package.json","includedInParent":true,"mtime":1490936790000},{"name":"./transform","loc":{"line":1,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (topology) {\n  var t = (0, _transform2.default)(topology.transform),\n      key,\n      x0 = Infinity,\n      y0 = x0,\n      x1 = -x0,\n      y1 = -x0;\n\n  function bboxPoint(p) {\n    p = t(p);\n    if (p[0] < x0) x0 = p[0];\n    if (p[0] > x1) x1 = p[0];\n    if (p[1] < y0) y0 = p[1];\n    if (p[1] > y1) y1 = p[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\":\n        o.geometries.forEach(bboxGeometry);break;\n      case \"Point\":\n        bboxPoint(o.coordinates);break;\n      case \"MultiPoint\":\n        o.coordinates.forEach(bboxPoint);break;\n    }\n  }\n\n  topology.arcs.forEach(function (arc) {\n    var i = -1,\n        n = arc.length,\n        p;\n    while (++i < n) {\n      p = t(arc[i], i);\n      if (p[0] < x0) x0 = p[0];\n      if (p[0] > x1) x1 = p[0];\n      if (p[1] < y0) y0 = p[1];\n      if (p[1] > y1) y1 = p[1];\n    }\n  });\n\n  for (key in topology.objects) {\n    bboxGeometry(topology.objects[key]);\n  }\n\n  return [x0, y0, x1, y1];\n};\n\nvar _transform = require(\"./transform\");\n\nvar _transform2 = _interopRequireDefault(_transform);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"},"hash":"38e67d497f80e7a850fecfc299ece22c","cacheData":{"env":{}}}