{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-hierarchy/package.json","includedInParent":true,"mtime":1518550386000},{"name":"./HierarchyLayout","loc":{"line":1,"column":28}},{"name":"vega-util","loc":{"line":2,"column":30}},{"name":"d3-hierarchy","loc":{"line":3,"column":28}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Tree;\n\nvar _HierarchyLayout = require('./HierarchyLayout');\n\nvar _HierarchyLayout2 = _interopRequireDefault(_HierarchyLayout);\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Hierarchy = require('d3-hierarchy');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Layouts = {\n  tidy: _d3Hierarchy.tree,\n  cluster: _d3Hierarchy.cluster\n};\n\nvar Output = [\"x\", \"y\", \"depth\", \"children\"];\n\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nfunction Tree(params) {\n  _HierarchyLayout2.default.call(this, params);\n}\n\nTree.Definition = {\n  \"type\": \"Tree\",\n  \"metadata\": { \"tree\": true, \"modifies\": true },\n  \"params\": [{ \"name\": \"field\", \"type\": \"field\" }, { \"name\": \"sort\", \"type\": \"compare\" }, { \"name\": \"method\", \"type\": \"enum\", \"default\": \"tidy\", \"values\": [\"tidy\", \"cluster\"] }, { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 }, { \"name\": \"nodeSize\", \"type\": \"number\", \"array\": true, \"length\": 2 }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 4, \"default\": Output }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Tree, _HierarchyLayout2.default);\n\n/**\n * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n */\nprototype.layout = function (method) {\n  var m = method || 'tidy';\n  if (Layouts.hasOwnProperty(m)) return Layouts[m]();else (0, _vegaUtil.error)('Unrecognized Tree layout method: ' + m);\n};\n\nprototype.params = ['size', 'nodeSize', 'separation'];\n\nprototype.fields = Output;"},"hash":"512426e9bccd348b7f92f7ff55bade12","cacheData":{"env":{}}}