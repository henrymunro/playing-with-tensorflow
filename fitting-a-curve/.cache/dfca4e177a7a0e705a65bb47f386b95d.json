{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"./constants","loc":{"line":1,"column":39}},{"name":"./guide-mark","loc":{"line":2,"column":22}},{"name":"../marks/marktypes","loc":{"line":3,"column":23}},{"name":"../marks/roles","loc":{"line":4,"column":27}},{"name":"../encode/encode-util","loc":{"line":5,"column":24}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (spec, config, userEncode, dataRef) {\n  var orient = spec.orient,\n      vscale = spec.gridScale,\n      sign = orient === _constants.Left || orient === _constants.Top ? 1 : -1,\n      offset = sign * spec.offset || 0,\n      zero = { value: 0 },\n      encode = {},\n      enter,\n      exit,\n      update,\n      tickPos,\n      u,\n      v,\n      v2,\n      s;\n\n  encode.enter = enter = {\n    opacity: zero\n  };\n  (0, _encodeUtil.addEncode)(enter, 'stroke', config.gridColor);\n  (0, _encodeUtil.addEncode)(enter, 'strokeWidth', config.gridWidth);\n  (0, _encodeUtil.addEncode)(enter, 'strokeDash', config.gridDash);\n\n  encode.exit = exit = {\n    opacity: zero\n  };\n\n  encode.update = update = {};\n  (0, _encodeUtil.addEncode)(update, 'opacity', config.gridOpacity);\n\n  tickPos = {\n    scale: spec.scale,\n    field: _constants.Value,\n    band: config.bandPosition,\n    round: config.tickRound,\n    extra: config.tickExtra,\n    offset: config.tickOffset\n  };\n\n  if (orient === _constants.Top || orient === _constants.Bottom) {\n    u = 'x';\n    v = 'y';\n    s = 'height';\n  } else {\n    u = 'y';\n    v = 'x';\n    s = 'width';\n  }\n  v2 = v + '2';\n\n  update[u] = enter[u] = exit[u] = tickPos;\n\n  if (vscale) {\n    enter[v] = { scale: vscale, range: 0, mult: sign, offset: offset };\n    update[v2] = enter[v2] = { scale: vscale, range: 1, mult: sign, offset: offset };\n  } else {\n    enter[v] = { value: offset };\n    update[v2] = enter[v2] = { signal: s, mult: sign, offset: offset };\n  }\n\n  return (0, _guideMark2.default)(_marktypes.RuleMark, _roles.AxisGridRole, null, _constants.Value, dataRef, encode, userEncode);\n};\n\nvar _constants = require('./constants');\n\nvar _guideMark = require('./guide-mark');\n\nvar _guideMark2 = _interopRequireDefault(_guideMark);\n\nvar _marktypes = require('../marks/marktypes');\n\nvar _roles = require('../marks/roles');\n\nvar _encodeUtil = require('../encode/encode-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"},"hash":"dcd69dc4eba1357abbae672b0e22eaa0","cacheData":{"env":{}}}