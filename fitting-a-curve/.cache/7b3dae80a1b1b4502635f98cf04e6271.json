{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-expression/package.json","includedInParent":true,"mtime":1498878258000}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ASTNode;\nfunction ASTNode(type) {\n  this.type = type;\n}\n\nASTNode.prototype.visit = function (visitor) {\n  var node = this,\n      c,\n      i,\n      n;\n\n  if (visitor(node)) return 1;\n\n  for (c = children(node), i = 0, n = c.length; i < n; ++i) {\n    if (c[i].visit(visitor)) return 1;\n  }\n};\n\nfunction children(node) {\n  switch (node.type) {\n    case 'ArrayExpression':\n      return node.elements;\n    case 'BinaryExpression':\n    case 'LogicalExpression':\n      return [node.left, node.right];\n    case 'CallExpression':\n      var args = node.arguments.slice();\n      args.unshift(node.callee);\n      return args;\n    case 'ConditionalExpression':\n      return [node.test, node.consequent, node.alternate];\n    case 'MemberExpression':\n      return [node.object, node.property];\n    case 'ObjectExpression':\n      return node.properties;\n    case 'Property':\n      return [node.key, node.value];\n    case 'UnaryExpression':\n      return [node.argument];\n    case 'Identifier':\n    case 'Literal':\n    case 'RawCode':\n    default:\n      return [];\n  }\n}"},"hash":"b5e781b116443a79a1f314d3675a6303","cacheData":{"env":{}}}