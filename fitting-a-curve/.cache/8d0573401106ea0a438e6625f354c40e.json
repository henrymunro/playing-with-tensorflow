{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-loader/package.json","includedInParent":true,"mtime":1520276803000},{"name":"vega-util","loc":{"line":1,"column":46}},{"name":"d3-request","loc":{"line":2,"column":22}},{"name":"fs","loc":{"line":177,"column":52}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (options) {\n  return {\n    options: options || {},\n    sanitize: sanitize,\n    load: load,\n    file: file,\n    http: http\n  };\n};\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Request = require('d3-request');\n\n// Matches absolute URLs with optional protocol\n//   https://...    file://...    //...\nvar protocol_re = /^([A-Za-z]+:)?\\/\\//;\n\n// Special treatment in node.js for the file: protocol\nvar fileProtocol = 'file://';\n\n// Request options to check for d3-request\nvar requestOptions = ['mimeType', 'responseType', 'user', 'password'];\n\n/**\n * Creates a new loader instance that provides methods for requesting files\n * from either the network or disk, and for sanitizing request URIs.\n * @param {object} [options] - Optional default loading options to use.\n * @return {object} - A new loader instance.\n */\n\n\nfunction marshall(loader, options) {\n  return (0, _vegaUtil.extend)({}, loader.options, options);\n}\n\n/**\n * Load an external resource, typically either from the web or from the local\n * filesystem. This function uses {@link sanitize} to first sanitize the uri,\n * then calls either {@link http} (for web requests) or {@link file} (for\n * filesystem loading).\n * @param {string} uri - The resource indicator (e.g., URL or filename).\n * @param {object} [options] - Optional loading options. These options will\n *   override any existing default options.\n * @return {Promise} - A promise that resolves to the loaded content.\n */\nfunction load(uri, options) {\n  var loader = this;\n  return loader.sanitize(uri, options).then(function (opt) {\n    var url = opt.href;\n    return opt.localFile ? loader.file(url) : loader.http(url, options);\n  });\n}\n\n/**\n * URI sanitizer function.\n * @param {string} uri - The uri (url or filename) to sanity check.\n * @param {object} options - An options hash.\n * @return {Promise} - A promise that resolves to an object containing\n *  sanitized uri data, or rejects it the input uri is deemed invalid.\n *  The properties of the resolved object are assumed to be\n *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be\n *  provided by the 'href' property of the returned object.\n */\nfunction sanitize(uri, options) {\n  options = marshall(this, options);\n  return new Promise(function (accept, reject) {\n    var result = { href: null },\n        isFile,\n        hasProtocol,\n        loadFile,\n        base;\n\n    if (uri == null || typeof uri !== 'string') {\n      reject('Sanitize failure, invalid URI: ' + (0, _vegaUtil.stringValue)(uri));\n      return;\n    }\n\n    hasProtocol = protocol_re.test(uri);\n\n    // if relative url (no protocol/host), prepend baseURL\n    if ((base = options.baseURL) && !hasProtocol) {\n      // Ensure that there is a slash between the baseURL (e.g. hostname) and url\n      if (!startsWith(uri, '/') && base[base.length - 1] !== '/') {\n        uri = '/' + uri;\n      }\n      uri = base + uri;\n    }\n\n    // should we load from file system?\n    loadFile = (isFile = startsWith(uri, fileProtocol)) || options.mode === 'file' || options.mode !== 'http' && !hasProtocol && fs();\n\n    if (isFile) {\n      // strip file protocol\n      uri = uri.slice(fileProtocol.length);\n    } else if (startsWith(uri, '//')) {\n      if (options.defaultProtocol === 'file') {\n        // if is file, strip protocol and set loadFile flag\n        uri = uri.slice(2);\n        loadFile = true;\n      } else {\n        // if relative protocol (starts with '//'), prepend default protocol\n        uri = (options.defaultProtocol || 'http') + ':' + uri;\n      }\n    }\n\n    // set non-enumerable mode flag to indicate local file load\n    Object.defineProperty(result, 'localFile', { value: !!loadFile });\n\n    // set uri\n    result.href = uri;\n\n    // set default result target, if specified\n    if (options.target) {\n      result.target = options.target + '';\n    }\n\n    // return\n    accept(result);\n  });\n}\n\n/**\n * HTTP request loader.\n * @param {string} url - The url to request.\n * @param {object} options - An options hash.\n * @return {Promise} - A promise that resolves to the file contents.\n */\nfunction http(url, options) {\n  options = marshall(this, options);\n  return new Promise(function (accept, reject) {\n    var req = (0, _d3Request.request)(url),\n        name;\n\n    for (name in options.headers) {\n      req.header(name, options.headers[name]);\n    }\n\n    requestOptions.forEach(function (name) {\n      if (options[name]) req[name](options[name]);\n    });\n\n    req.on('error', function (error) {\n      reject(error || 'Error loading URL: ' + url);\n    }).on('load', function (result) {\n      var text = result && result.responseText;\n      !result || result.status === 0 ? reject(text || 'Error') : accept(text);\n    }).get();\n  });\n}\n\n/**\n * File system loader.\n * @param {string} filename - The file system path to load.\n * @return {Promise} - A promise that resolves to the file contents.\n */\nfunction file(filename) {\n  return new Promise(function (accept, reject) {\n    var f = fs();\n    f ? f.readFile(filename, function (error, data) {\n      if (error) reject(error);else accept(data);\n    }) : reject('No file system access for ' + filename);\n  });\n}\n\nfunction fs() {\n  var fs = typeof require === 'function' && require('fs');\n  return fs && (0, _vegaUtil.isFunction)(fs.readFile) ? fs : null;\n}\n\nfunction startsWith(string, query) {\n  return string == null ? false : string.lastIndexOf(query, 0) === 0;\n}"},"hash":"10881f7f87459662f1858e3da008428f","cacheData":{"env":{}}}