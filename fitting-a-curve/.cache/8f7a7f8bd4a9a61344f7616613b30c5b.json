{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-geo/package.json","includedInParent":true,"mtime":1518585631000},{"name":"./constants","loc":{"line":1,"column":32}},{"name":"vega-dataflow","loc":{"line":2,"column":24}},{"name":"vega-projection","loc":{"line":3,"column":47}},{"name":"vega-util","loc":{"line":4,"column":58}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Projection;\nexports.collectGeoJSON = collectGeoJSON;\n\nvar _constants = require('./constants');\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaProjection = require('vega-projection');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Maintains a cartographic projection.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nfunction Projection(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\nvar prototype = (0, _vegaUtil.inherits)(Projection, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var proj = this.value;\n\n  if (!proj || _.modified('type')) {\n    this.value = proj = create(_.type);\n    _vegaProjection.projectionProperties.forEach(function (prop) {\n      if (_[prop] != null) set(proj, prop, _[prop]);\n    });\n  } else {\n    _vegaProjection.projectionProperties.forEach(function (prop) {\n      if (_.modified(prop)) set(proj, prop, _[prop]);\n    });\n  }\n\n  if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n  if (_.fit) fit(proj, _);\n\n  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n};\n\nfunction fit(proj, _) {\n  var data = collectGeoJSON(_.fit);\n  _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;\n}\n\nfunction create(type) {\n  var constructor = (0, _vegaProjection.projection)((type || 'mercator').toLowerCase());\n  if (!constructor) (0, _vegaUtil.error)('Unrecognized projection type: ' + type);\n  return constructor();\n}\n\nfunction set(proj, key, value) {\n  if ((0, _vegaUtil.isFunction)(proj[key])) proj[key](value);\n}\n\nfunction collectGeoJSON(features) {\n  features = (0, _vegaUtil.array)(features);\n  return features.length === 1 ? features[0] : {\n    type: _constants.FeatureCollection,\n    features: features.reduce(function (list, f) {\n      f && f.type === _constants.FeatureCollection ? list.push.apply(list, f.features) : (0, _vegaUtil.isArray)(f) ? list.push.apply(list, f) : list.push(f);\n      return list;\n    }, [])\n  };\n}"},"hash":"16cfae25b57eb816e92ed45717f59395","cacheData":{"env":{}}}