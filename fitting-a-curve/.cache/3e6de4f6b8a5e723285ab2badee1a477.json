{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-geo/package.json","includedInParent":true,"mtime":1518585631000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-projection","loc":{"line":2,"column":32}},{"name":"vega-util","loc":{"line":3,"column":33}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GeoPath;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaProjection = require('vega-projection');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Map GeoJSON data to an SVG path string.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {function(object): *} [params.field] - The field with GeoJSON data,\n *   or null if the tuple itself is a GeoJSON feature.\n * @param {string} [params.as='path'] - The output field in which to store\n *   the generated path data (default 'path').\n */\nfunction GeoPath(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nGeoPath.Definition = {\n  \"type\": \"GeoPath\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"projection\", \"type\": \"projection\" }, { \"name\": \"field\", \"type\": \"field\" }, { \"name\": \"pointRadius\", \"type\": \"number\", \"expr\": true }, { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(GeoPath, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      path = this.value,\n      field = _.field || _vegaUtil.identity,\n      as = _.as || 'path',\n      flag = out.SOURCE;\n\n  function set(t) {\n    t[as] = path(field(t));\n  }\n\n  if (!path || _.modified()) {\n    // parameters updated, reset and reflow\n    this.value = path = (0, _vegaProjection.getProjectionPath)(_.projection);\n    out.materialize().reflow();\n  } else {\n    flag = field === _vegaUtil.identity || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;\n  }\n\n  var prev = initPath(path, _.pointRadius);\n  out.visit(flag, set);\n  path.pointRadius(prev);\n\n  return out.modifies(as);\n};\n\nfunction initPath(path, pointRadius) {\n  var prev = path.pointRadius();\n  path.context(null);\n  if (pointRadius != null) {\n    path.pointRadius(pointRadius);\n  }\n  return prev;\n}"},"hash":"2eee1ccb87b3b535586b691bf7be694d","cacheData":{"env":{}}}