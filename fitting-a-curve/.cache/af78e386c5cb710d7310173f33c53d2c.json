{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"./Facet","loc":{"line":1,"column":18}},{"name":"vega-dataflow","loc":{"line":2,"column":30}},{"name":"vega-util","loc":{"line":3,"column":46}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PreFacet;\n\nvar _Facet = require('./Facet');\n\nvar _Facet2 = _interopRequireDefault(_Facet);\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\nfunction PreFacet(params) {\n  _Facet2.default.call(this, params);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(PreFacet, _Facet2.default);\n\nprototype.transform = function (_, pulse) {\n  var self = this,\n      flow = _.subflow,\n      field = _.field;\n\n  if (_.modified('field') || field && pulse.modified((0, _vegaUtil.accessorFields)(field))) {\n    (0, _vegaUtil.error)('PreFacet does not support field modification.');\n  }\n\n  this._targets.active = 0; // reset list of active subflows\n\n  pulse.visit(pulse.MOD, function (t) {\n    var sf = self.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);\n    field ? field(t).forEach(function (_) {\n      sf.mod(_);\n    }) : sf.mod(t);\n  });\n\n  pulse.visit(pulse.ADD, function (t) {\n    var sf = self.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);\n    field ? field(t).forEach(function (_) {\n      sf.add((0, _vegaDataflow.ingest)(_));\n    }) : sf.add(t);\n  });\n\n  pulse.visit(pulse.REM, function (t) {\n    var sf = self.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);\n    field ? field(t).forEach(function (_) {\n      sf.rem(_);\n    }) : sf.rem(t);\n  });\n\n  return pulse;\n};"},"hash":"55b466ef97fece235588daf300bbac53","cacheData":{"env":{}}}