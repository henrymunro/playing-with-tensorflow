{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-geo/package.json","includedInParent":true,"mtime":1518585631000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-projection","loc":{"line":2,"column":32}},{"name":"vega-util","loc":{"line":3,"column":30}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GeoShape;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaProjection = require('vega-projection');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Annotate items with a geopath shape generator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {function(object): *} [params.field] - The field with GeoJSON data,\n *   or null if the tuple itself is a GeoJSON feature.\n * @param {string} [params.as='shape'] - The output field in which to store\n *   the generated path data (default 'shape').\n */\nfunction GeoShape(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nGeoShape.Definition = {\n  \"type\": \"GeoShape\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"projection\", \"type\": \"projection\" }, { \"name\": \"field\", \"type\": \"field\", \"default\": \"datum\" }, { \"name\": \"pointRadius\", \"type\": \"number\", \"expr\": true }, { \"name\": \"as\", \"type\": \"string\", \"default\": \"shape\" }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(GeoShape, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      shape = this.value,\n      datum = _.field || (0, _vegaUtil.field)('datum'),\n      as = _.as || 'shape',\n      flag = out.ADD_MOD;\n\n  if (!shape || _.modified()) {\n    // parameters updated, reset and reflow\n    this.value = shape = shapeGenerator((0, _vegaProjection.getProjectionPath)(_.projection), datum, _.pointRadius);\n    out.materialize().reflow();\n    flag = out.SOURCE;\n  }\n\n  out.visit(flag, function (t) {\n    t[as] = shape;\n  });\n\n  return out.modifies(as);\n};\n\nfunction shapeGenerator(path, field, pointRadius) {\n  var shape = pointRadius == null ? function (_) {\n    return path(field(_));\n  } : function (_) {\n    var prev = path.pointRadius(),\n        value = path.pointRadius(pointRadius)(field(_));\n    path.pointRadius(prev);\n    return value;\n  };\n  shape.context = function (_) {\n    path.context(_);\n    return shape;\n  };\n\n  return shape;\n}"},"hash":"2043e6d33a7a4e185b0385a010891a36","cacheData":{"env":{}}}