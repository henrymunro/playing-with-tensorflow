{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-view-transforms/package.json","includedInParent":true,"mtime":1518586109000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Identifier;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar COUNTER_NAME = ':vega_identifier:';\n\n/**\n * Adds a unique identifier to all added tuples.\n * This transform creates a new signal that serves as an id counter.\n * As a result, the id counter is shared across all instances of this\n * transform, generating unique ids across multiple data streams. In\n * addition, this signal value can be included in a snapshot of the\n * dataflow state, enabling correct resumption of id allocation.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.as - The field name for the generated identifier.\n */\nfunction Identifier(params) {\n  _vegaDataflow.Transform.call(this, 0, params);\n}\n\nIdentifier.Definition = {\n  \"type\": \"Identifier\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"as\", \"type\": \"string\", \"required\": true }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Identifier, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var counter = getCounter(pulse.dataflow),\n      id = counter.value,\n      as = _.as;\n\n  pulse.visit(pulse.ADD, function (t) {\n    if (!t[as]) t[as] = ++id;\n  });\n\n  counter.set(this.value = id);\n  return pulse;\n};\n\nfunction getCounter(view) {\n  var counter = view._signals[COUNTER_NAME];\n  if (!counter) {\n    view._signals[COUNTER_NAME] = counter = view.add(0);\n  }\n  return counter;\n}"},"hash":"508c1e818ee97108c4c8477e44a3243c","cacheData":{"env":{}}}