{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-runtime/package.json","includedInParent":true,"mtime":1508906165000}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = expression;\nexports.operatorExpression = operatorExpression;\nexports.parameterExpression = parameterExpression;\nexports.eventExpression = eventExpression;\nexports.handlerExpression = handlerExpression;\nexports.encodeExpression = encodeExpression;\n/**\n * Parse an expression given the argument signature and body code.\n */\nfunction expression(args, code, ctx) {\n  // wrap code in return statement if expression does not terminate\n  if (code[code.length - 1] !== ';') {\n    code = 'return(' + code + ');';\n  }\n  var fn = Function.apply(null, args.concat(code));\n  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n}\n\n/**\n * Parse an expression used to update an operator value.\n */\nfunction operatorExpression(code, ctx) {\n  return expression(['_'], code, ctx);\n}\n\n/**\n * Parse an expression provided as an operator parameter value.\n */\nfunction parameterExpression(code, ctx) {\n  return expression(['datum', '_'], code, ctx);\n}\n\n/**\n * Parse an expression applied to an event stream.\n */\nfunction eventExpression(code, ctx) {\n  return expression(['event'], code, ctx);\n}\n\n/**\n * Parse an expression used to handle an event-driven operator update.\n */\nfunction handlerExpression(code, ctx) {\n  return expression(['_', 'event'], code, ctx);\n}\n\n/**\n * Parse an expression that performs visual encoding.\n */\nfunction encodeExpression(code, ctx) {\n  return expression(['item', '_'], code, ctx);\n}"},"hash":"6a01823873d0ba49ed13c1ece797dc2b","cacheData":{"env":{}}}