{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-encode/package.json","includedInParent":true,"mtime":1520281405000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":39}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Encode;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Invokes encoding functions for visual items.\n * @constructor\n * @param {object} params - The parameters to the encoding functions. This\n *   parameter object will be passed through to all invoked encoding functions.\n * @param {object} param.encoders - The encoding functions\n * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set\n * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set\n * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set\n */\nfunction Encode(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(Encode, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.ADD_REM),\n      encoders = _.encoders,\n      encode = pulse.encode;\n\n  // if an array, the encode directive includes additional sets\n  // that must be defined in order for the primary set to be invoked\n  // e.g., only run the update set if the hover set is defined\n  if ((0, _vegaUtil.isArray)(encode)) {\n    if (out.changed() || encode.every(function (e) {\n      return encoders[e];\n    })) {\n      encode = encode[0];\n    } else {\n      return pulse.StopPropagation;\n    }\n  }\n\n  // marshall encoder functions\n  var reenter = encode === 'enter',\n      update = encoders.update || _vegaUtil.falsy,\n      enter = encoders.enter || _vegaUtil.falsy,\n      exit = encoders.exit || _vegaUtil.falsy,\n      set = (encode && !reenter ? encoders[encode] : update) || _vegaUtil.falsy;\n\n  if (pulse.changed(pulse.ADD)) {\n    pulse.visit(pulse.ADD, function (t) {\n      enter(t, _);\n      update(t, _);\n      if (set !== _vegaUtil.falsy && set !== update) set(t, _);\n    });\n    out.modifies(enter.output);\n    out.modifies(update.output);\n    if (set !== _vegaUtil.falsy && set !== update) out.modifies(set.output);\n  }\n\n  if (pulse.changed(pulse.REM) && exit !== _vegaUtil.falsy) {\n    pulse.visit(pulse.REM, function (t) {\n      exit(t, _);\n    });\n    out.modifies(exit.output);\n  }\n\n  if (reenter || set !== _vegaUtil.falsy) {\n    var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);\n    if (reenter) {\n      pulse.visit(flag, function (t) {\n        var mod = enter(t, _);\n        if (set(t, _) || mod) out.mod.push(t);\n      });\n      if (out.mod.length) out.modifies(enter.output);\n    } else {\n      pulse.visit(flag, function (t) {\n        if (set(t, _)) out.mod.push(t);\n      });\n    }\n    if (out.mod.length) out.modifies(set.output);\n  }\n\n  return out.changed() ? out : pulse.StopPropagation;\n};"},"hash":"262d6405527af32f0e4ad6c0559149ac","cacheData":{"env":{}}}