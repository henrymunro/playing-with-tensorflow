{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-encode/package.json","includedInParent":true,"mtime":1520281405000},{"name":"./labels","loc":{"line":1,"column":39}},{"name":"./ticks","loc":{"line":2,"column":36}},{"name":"vega-dataflow","loc":{"line":3,"column":32}},{"name":"vega-scale","loc":{"line":4,"column":28}},{"name":"vega-util","loc":{"line":5,"column":51}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = LegendEntries;\n\nvar _labels = require('./labels');\n\nvar _ticks = require('./ticks');\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaScale = require('vega-scale');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Generates legend entries for visualizing a scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate items for.\n * @param {*} [params.count=10] - The approximate number of items, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\nfunction LegendEntries(params) {\n  _vegaDataflow.Transform.call(this, [], params);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(LegendEntries, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  if (this.value != null && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      total = 0,\n      items = this.value,\n      grad = _.type === 'gradient',\n      scale = _.scale,\n      count = _.count == null ? 5 : (0, _ticks.tickCount)(scale, _.count),\n      format = _.format || (0, _ticks.tickFormat)(scale, count, _.formatSpecifier),\n      values = _.values || (0, _labels.labelValues)(scale, count, grad);\n\n  format = (0, _labels.labelFormat)(scale, format);\n  if (items) out.rem = items;\n\n  if (grad) {\n    var domain = _.values ? scale.domain() : values,\n        fraction = (0, _vegaScale.scaleFraction)(scale, domain[0], (0, _vegaUtil.peek)(domain));\n  } else {\n    var size = _.size,\n        offset;\n    if ((0, _vegaUtil.isFunction)(size)) {\n      // if first value maps to size zero, remove from list (vega#717)\n      if (!_.values && scale(values[0]) === 0) {\n        values = values.slice(1);\n      }\n      // compute size offset for legend entries\n      offset = values.reduce(function (max, value) {\n        return Math.max(max, size(value, _));\n      }, 0);\n    } else {\n      size = (0, _vegaUtil.constant)(offset = size || 8);\n    }\n  }\n\n  items = values.map(function (value, index) {\n    var t = (0, _vegaDataflow.ingest)({\n      index: index,\n      label: format(value, index, values),\n      value: value\n    });\n\n    if (grad) {\n      t.perc = fraction(value);\n    } else {\n      t.offset = offset;\n      t.size = size(value, _);\n      t.total = Math.round(total);\n      total += t.size;\n    }\n    return t;\n  });\n\n  out.source = items;\n  out.add = items;\n  this.value = items;\n\n  return out;\n};"},"hash":"9b1864cc853b65f7549d47d522c878f0","cacheData":{"env":{}}}