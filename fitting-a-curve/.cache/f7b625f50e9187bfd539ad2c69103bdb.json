{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"vega-dataflow","loc":{"line":1,"column":22}},{"name":"vega-expression","loc":{"line":2,"column":44}},{"name":"vega-statistics","loc":{"line":3,"column":21}},{"name":"vega-util","loc":{"line":9,"column":7}},{"name":"d3-color","loc":{"line":10,"column":33}},{"name":"d3-array","loc":{"line":11,"column":32}},{"name":"./format","loc":{"line":17,"column":7}},{"name":"./quarter","loc":{"line":18,"column":34}},{"name":"./log","loc":{"line":19,"column":32}},{"name":"./inscope","loc":{"line":20,"column":20}},{"name":"./clamp-range","loc":{"line":21,"column":23}},{"name":"./pinch","loc":{"line":22,"column":40}},{"name":"./window","loc":{"line":23,"column":48}},{"name":"./flush","loc":{"line":24,"column":18}},{"name":"./span","loc":{"line":25,"column":17}},{"name":"./scale","loc":{"line":26,"column":85}},{"name":"./scale-gradient","loc":{"line":27,"column":26}},{"name":"./geo","loc":{"line":28,"column":46}},{"name":"./shape","loc":{"line":29,"column":34}},{"name":"./data","loc":{"line":30,"column":64}},{"name":"./tree","loc":{"line":31,"column":38}},{"name":"./inrange","loc":{"line":32,"column":20}},{"name":"./encode","loc":{"line":33,"column":19}},{"name":"./modify","loc":{"line":34,"column":19}},{"name":"./selection","loc":{"line":35,"column":83}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeGenerator = exports.codegenParams = exports.functionContext = undefined;\nexports.expressionFunction = expressionFunction;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaExpression = require('vega-expression');\n\nvar _vegaStatistics = require('vega-statistics');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Color = require('d3-color');\n\nvar _d3Array = require('d3-array');\n\nvar _format = require('./format');\n\nvar _quarter = require('./quarter');\n\nvar _log = require('./log');\n\nvar _inscope = require('./inscope');\n\nvar _inscope2 = _interopRequireDefault(_inscope);\n\nvar _clampRange = require('./clamp-range');\n\nvar _clampRange2 = _interopRequireDefault(_clampRange);\n\nvar _pinch = require('./pinch');\n\nvar _window = require('./window');\n\nvar _flush = require('./flush');\n\nvar _flush2 = _interopRequireDefault(_flush);\n\nvar _span = require('./span');\n\nvar _span2 = _interopRequireDefault(_span);\n\nvar _scale = require('./scale');\n\nvar _scaleGradient = require('./scale-gradient');\n\nvar _scaleGradient2 = _interopRequireDefault(_scaleGradient);\n\nvar _geo = require('./geo');\n\nvar _shape = require('./shape');\n\nvar _data = require('./data');\n\nvar _tree = require('./tree');\n\nvar _inrange = require('./inrange');\n\nvar _inrange2 = _interopRequireDefault(_inrange);\n\nvar _encode = require('./encode');\n\nvar _encode2 = _interopRequireDefault(_encode);\n\nvar _modify = require('./modify');\n\nvar _modify2 = _interopRequireDefault(_modify);\n\nvar _selection = require('./selection');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Expression function context object\nvar functionContext = exports.functionContext = {\n  random: function () {\n    return (0, _vegaStatistics.random)();\n  }, // override default\n  isArray: _vegaUtil.isArray,\n  isBoolean: _vegaUtil.isBoolean,\n  isDate: _vegaUtil.isDate,\n  isNumber: _vegaUtil.isNumber,\n  isObject: _vegaUtil.isObject,\n  isRegExp: _vegaUtil.isRegExp,\n  isString: _vegaUtil.isString,\n  isTuple: _vegaDataflow.isTuple,\n  toBoolean: _vegaUtil.toBoolean,\n  toDate: _vegaUtil.toDate,\n  toNumber: _vegaUtil.toNumber,\n  toString: _vegaUtil.toString,\n  pad: _vegaUtil.pad,\n  peek: _vegaUtil.peek,\n  truncate: _vegaUtil.truncate,\n  rgb: _d3Color.rgb,\n  lab: _d3Color.lab,\n  hcl: _d3Color.hcl,\n  hsl: _d3Color.hsl,\n  sequence: _d3Array.range,\n  format: _format.format,\n  utcFormat: _format.utcFormat,\n  utcParse: _format.utcParse,\n  timeFormat: _format.timeFormat,\n  timeParse: _format.timeParse,\n  monthFormat: _format.monthFormat,\n  monthAbbrevFormat: _format.monthAbbrevFormat,\n  dayFormat: _format.dayFormat,\n  dayAbbrevFormat: _format.dayAbbrevFormat,\n  quarter: _quarter.quarter,\n  utcquarter: _quarter.utcquarter,\n  warn: _log.warn,\n  info: _log.info,\n  debug: _log.debug,\n  inScope: _inscope2.default,\n  clampRange: _clampRange2.default,\n  pinchDistance: _pinch.pinchDistance,\n  pinchAngle: _pinch.pinchAngle,\n  screen: _window.screen,\n  containerSize: _window.containerSize,\n  windowSize: _window.windowSize,\n  span: _span2.default,\n  flush: _flush2.default,\n  bandspace: _scale.bandspace,\n  inrange: _inrange2.default,\n  setdata: _data.setdata,\n  pathShape: _shape.pathShape,\n  panLinear: _vegaUtil.panLinear,\n  panLog: _vegaUtil.panLog,\n  panPow: _vegaUtil.panPow,\n  zoomLinear: _vegaUtil.zoomLinear,\n  zoomLog: _vegaUtil.zoomLog,\n  zoomPow: _vegaUtil.zoomPow,\n  encode: _encode2.default,\n  modify: _modify2.default\n};\n\nvar eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'],\n    // event functions\neventPrefix = 'event.vega.',\n    // event function prefix\nthisPrefix = 'this.',\n    // function context prefix\nastVisitors = {}; // AST visitors for dependency analysis\n\nfunction expressionFunction(name, fn, visitor) {\n  if (arguments.length === 1) {\n    return functionContext[name];\n  }\n\n  // register with the functionContext\n  functionContext[name] = fn;\n\n  // if there is an astVisitor register that, too\n  if (visitor) astVisitors[name] = visitor;\n\n  // if the code generator has already been initialized,\n  // we need to also register the function with it\n  if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;\n  return this;\n}\n\n// register expression functions with ast visitors\nexpressionFunction('bandwidth', _scale.bandwidth, _scale.scaleVisitor);\nexpressionFunction('copy', _scale.copy, _scale.scaleVisitor);\nexpressionFunction('domain', _scale.domain, _scale.scaleVisitor);\nexpressionFunction('range', _scale.range, _scale.scaleVisitor);\nexpressionFunction('invert', _scale.invert, _scale.scaleVisitor);\nexpressionFunction('scale', _scale.scale, _scale.scaleVisitor);\nexpressionFunction('gradient', _scaleGradient2.default, _scale.scaleVisitor);\nexpressionFunction('geoArea', _geo.geoArea, _scale.scaleVisitor);\nexpressionFunction('geoBounds', _geo.geoBounds, _scale.scaleVisitor);\nexpressionFunction('geoCentroid', _geo.geoCentroid, _scale.scaleVisitor);\nexpressionFunction('geoShape', _shape.geoShape, _scale.scaleVisitor);\nexpressionFunction('indata', _data.indata, _data.indataVisitor);\nexpressionFunction('data', _data.data, _data.dataVisitor);\nexpressionFunction('vlSingle', _selection.vlPoint, _data.dataVisitor);\nexpressionFunction('vlSingleDomain', _selection.vlPointDomain, _data.dataVisitor);\nexpressionFunction('vlMulti', _selection.vlPoint, _selection.vlMultiVisitor);\nexpressionFunction('vlMultiDomain', _selection.vlPointDomain, _selection.vlMultiVisitor);\nexpressionFunction('vlInterval', _selection.vlInterval, _data.dataVisitor);\nexpressionFunction('vlIntervalDomain', _selection.vlIntervalDomain, _data.dataVisitor);\nexpressionFunction('treePath', _tree.treePath, _data.dataVisitor);\nexpressionFunction('treeAncestors', _tree.treeAncestors, _data.dataVisitor);\n\n// Build expression function registry\nfunction buildFunctions(codegen) {\n  var fn = (0, _vegaExpression.functions)(codegen);\n  eventFunctions.forEach(function (name) {\n    fn[name] = eventPrefix + name;\n  });\n  for (var name in functionContext) {\n    fn[name] = thisPrefix + name;\n  }\n  return fn;\n}\n\n// Export code generator and parameters\nvar codegenParams = exports.codegenParams = {\n  blacklist: ['_'],\n  whitelist: ['datum', 'event', 'item'],\n  fieldvar: 'datum',\n  globalvar: function (id) {\n    return '_[' + (0, _vegaUtil.stringValue)('$' + id) + ']';\n  },\n  functions: buildFunctions,\n  constants: _vegaExpression.constants,\n  visitors: astVisitors\n};\n\nvar codeGenerator = exports.codeGenerator = (0, _vegaExpression.codegen)(codegenParams);"},"hash":"f2e59f0cd10575cadb7e551c5f9b1b33","cacheData":{"env":{}}}