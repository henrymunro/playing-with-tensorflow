{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-force/package.json","includedInParent":true,"mtime":1501882623000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-util","loc":{"line":2,"column":65}},{"name":"d3-force","loc":{"line":6,"column":7}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Force;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Force = require('d3-force');\n\nvar ForceMap = {\n  center: _d3Force.forceCenter,\n  collide: _d3Force.forceCollide,\n  nbody: _d3Force.forceManyBody,\n  link: _d3Force.forceLink,\n  x: _d3Force.forceX,\n  y: _d3Force.forceY\n};\n\nvar Forces = 'forces',\n    ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],\n    ForceConfig = ['static', 'iterations'],\n    ForceOutput = ['x', 'y', 'vx', 'vy'];\n\n/**\n * Force simulation layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<object>} params.forces - The forces to apply.\n */\nfunction Force(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nForce.Definition = {\n  \"type\": \"Force\",\n  \"metadata\": { \"modifies\": true },\n  \"params\": [{ \"name\": \"static\", \"type\": \"boolean\", \"default\": false }, { \"name\": \"restart\", \"type\": \"boolean\", \"default\": false }, { \"name\": \"iterations\", \"type\": \"number\", \"default\": 300 }, { \"name\": \"alpha\", \"type\": \"number\", \"default\": 1 }, { \"name\": \"alphaMin\", \"type\": \"number\", \"default\": 0.001 }, { \"name\": \"alphaTarget\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"velocityDecay\", \"type\": \"number\", \"default\": 0.4 }, { \"name\": \"forces\", \"type\": \"param\", \"array\": true,\n    \"params\": [{\n      \"key\": { \"force\": \"center\" },\n      \"params\": [{ \"name\": \"x\", \"type\": \"number\", \"default\": 0 }, { \"name\": \"y\", \"type\": \"number\", \"default\": 0 }]\n    }, {\n      \"key\": { \"force\": \"collide\" },\n      \"params\": [{ \"name\": \"radius\", \"type\": \"number\", \"expr\": true }, { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.7 }, { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }]\n    }, {\n      \"key\": { \"force\": \"nbody\" },\n      \"params\": [{ \"name\": \"strength\", \"type\": \"number\", \"default\": -30 }, { \"name\": \"theta\", \"type\": \"number\", \"default\": 0.9 }, { \"name\": \"distanceMin\", \"type\": \"number\", \"default\": 1 }, { \"name\": \"distanceMax\", \"type\": \"number\" }]\n    }, {\n      \"key\": { \"force\": \"link\" },\n      \"params\": [{ \"name\": \"links\", \"type\": \"data\" }, { \"name\": \"id\", \"type\": \"field\" }, { \"name\": \"distance\", \"type\": \"number\", \"default\": 30, \"expr\": true }, { \"name\": \"strength\", \"type\": \"number\", \"expr\": true }, { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }]\n    }, {\n      \"key\": { \"force\": \"x\" },\n      \"params\": [{ \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 }, { \"name\": \"x\", \"type\": \"field\" }]\n    }, {\n      \"key\": { \"force\": \"y\" },\n      \"params\": [{ \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 }, { \"name\": \"y\", \"type\": \"field\" }]\n    }] }, {\n    \"name\": \"as\", \"type\": \"string\", \"array\": true, \"modify\": false,\n    \"default\": ForceOutput\n  }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Force, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var sim = this.value,\n      change = pulse.changed(pulse.ADD_REM),\n      params = _.modified(ForceParams),\n      iters = _.iterations || 300;\n\n  // configure simulation\n  if (!sim) {\n    this.value = sim = simulation(pulse.source, _);\n    sim.on('tick', rerun(pulse.dataflow, this));\n    if (!_.static) {\n      change = true;\n      sim.tick(); // ensure we run on init\n    }\n    pulse.modifies('index');\n  } else {\n    if (change) {\n      pulse.modifies('index');\n      sim.nodes(pulse.source);\n    }\n    if (params || pulse.changed(pulse.MOD)) {\n      setup(sim, _, 0, pulse);\n    }\n  }\n\n  // run simulation\n  if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {\n    sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n    if (_.static) {\n      for (sim.stop(); --iters >= 0;) sim.tick();\n    } else {\n      if (sim.stopped()) sim.restart();\n      if (!change) return pulse.StopPropagation; // defer to sim ticks\n    }\n  }\n\n  return this.finish(_, pulse);\n};\n\nprototype.finish = function (_, pulse) {\n  var dataflow = pulse.dataflow;\n\n  // inspect dependencies, touch link source data\n  for (var args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {\n    arg = args[j];\n    if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n      continue;\n    }\n    for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {\n      if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n        dataflow.pulse(op, dataflow.changeset().reflow());\n        break;\n      }\n    }\n  }\n\n  // reflow all nodes\n  return pulse.reflow(_.modified()).modifies(ForceOutput);\n};\n\nfunction rerun(df, op) {\n  return function () {\n    df.touch(op).run();\n  };\n}\n\nfunction simulation(nodes, _) {\n  var sim = (0, _d3Force.forceSimulation)(nodes),\n      stopped = false,\n      stop = sim.stop,\n      restart = sim.restart;\n\n  sim.stopped = function () {\n    return stopped;\n  };\n  sim.restart = function () {\n    stopped = false;\n    return restart();\n  };\n  sim.stop = function () {\n    stopped = true;\n    return stop();\n  };\n\n  return setup(sim, _, true).on('end', function () {\n    stopped = true;\n  });\n}\n\nfunction setup(sim, _, init, pulse) {\n  var f = (0, _vegaUtil.array)(_.forces),\n      i,\n      n,\n      p,\n      name;\n\n  for (i = 0, n = ForceParams.length; i < n; ++i) {\n    p = ForceParams[i];\n    if (p !== Forces && _.modified(p)) sim[p](_[p]);\n  }\n\n  for (i = 0, n = f.length; i < n; ++i) {\n    name = Forces + i;\n    p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;\n    if (p) sim.force(name, p);\n  }\n\n  for (n = sim.numForces || 0; i < n; ++i) {\n    sim.force(Forces + i, null); // remove\n  }\n\n  sim.numForces = f.length;\n  return sim;\n}\n\nfunction modified(f, pulse) {\n  var k, v;\n  for (k in f) {\n    if ((0, _vegaUtil.isFunction)(v = f[k]) && pulse.modified((0, _vegaUtil.accessorFields)(v))) return 1;\n  }\n  return 0;\n}\n\nfunction getForce(_) {\n  var f, p;\n\n  if (!ForceMap.hasOwnProperty(_.force)) {\n    (0, _vegaUtil.error)('Unrecognized force: ' + _.force);\n  }\n  f = ForceMap[_.force]();\n\n  for (p in _) {\n    if ((0, _vegaUtil.isFunction)(f[p])) setForceParam(f[p], _[p], _);\n  }\n\n  return f;\n}\n\nfunction setForceParam(f, v, _) {\n  f((0, _vegaUtil.isFunction)(v) ? function (d) {\n    return v(d, _);\n  } : v);\n}"},"hash":"5130317a59ed96d90b2d6300b8bb3e77","cacheData":{"env":{}}}