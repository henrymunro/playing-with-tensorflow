{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/d3-geo/package.json","includedInParent":true,"mtime":1521047798000},{"name":"./adder","loc":{"line":1,"column":18}},{"name":"./cartesian","loc":{"line":2,"column":67}},{"name":"./math","loc":{"line":3,"column":73}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = (0, _math.sin)(phi),\n      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + _math.quarterPi,\n        sinPhi0 = (0, _math.sin)(phi0),\n        cosPhi0 = (0, _math.cos)(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + _math.quarterPi,\n          sinPhi1 = (0, _math.sin)(phi1),\n          cosPhi1 = (0, _math.cos)(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > _math.pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));\n      angle += antimeridian ? delta + sign * _math.tau : delta;\n\n      // Are the longitudes either side of the pointâ€™s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));\n        (0, _cartesian.cartesianNormalizeInPlace)(arc);\n        var intersection = (0, _cartesian.cartesianCross)(normal, arc);\n        (0, _cartesian.cartesianNormalizeInPlace)(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;\n};\n\nvar _adder = require(\"./adder\");\n\nvar _adder2 = _interopRequireDefault(_adder);\n\nvar _cartesian = require(\"./cartesian\");\n\nvar _math = require(\"./math\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar sum = (0, _adder2.default)();"},"hash":"13705516e583c0a671c6a19027fd2b2e","cacheData":{"env":{}}}