{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/d3-voronoi/package.json","includedInParent":true,"mtime":1489170196000},{"name":"./RedBlackTree","loc":{"line":1,"column":27}},{"name":"./Diagram","loc":{"line":2,"column":32}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstCircle = undefined;\nexports.attachCircle = attachCircle;\nexports.detachCircle = detachCircle;\n\nvar _RedBlackTree = require(\"./RedBlackTree\");\n\nvar _Diagram = require(\"./Diagram\");\n\nvar circlePool = [];\n\nvar firstCircle = exports.firstCircle = undefined;\n\nfunction Circle() {\n  (0, _RedBlackTree.RedBlackNode)(this);\n  this.x = this.y = this.arc = this.site = this.cy = null;\n}\n\nfunction attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n\n  if (!lArc || !rArc) return;\n\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n\n  if (lSite === rSite) return;\n\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -_Diagram.epsilon2) return;\n\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n\n  var circle = circlePool.pop() || new Circle();\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n\n  var before = null,\n      node = _Diagram.circles._;\n\n  while (node) {\n    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n      if (node.L) node = node.L;else {\n        before = node.P;break;\n      }\n    } else {\n      if (node.R) node = node.R;else {\n        before = node;break;\n      }\n    }\n  }\n\n  _Diagram.circles.insert(before, circle);\n  if (!before) exports.firstCircle = firstCircle = circle;\n}\n\nfunction detachCircle(arc) {\n  var circle = arc.circle;\n  if (circle) {\n    if (!circle.P) exports.firstCircle = firstCircle = circle.N;\n    _Diagram.circles.remove(circle);\n    circlePool.push(circle);\n    (0, _RedBlackTree.RedBlackNode)(circle);\n    arc.circle = null;\n  }\n}"},"hash":"a0f03ce38ca03c8a1509795a31232979","cacheData":{"env":{}}}