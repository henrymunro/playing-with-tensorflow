{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"vega-dataflow","loc":{"line":1,"column":32}},{"name":"vega-util","loc":{"line":2,"column":31}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Cross;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\nfunction Cross(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nCross.Definition = {\n  \"type\": \"Cross\",\n  \"metadata\": { \"generates\": true },\n  \"params\": [{ \"name\": \"filter\", \"type\": \"expr\" }, { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"a\", \"b\"] }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Cross, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE),\n      data = this.value,\n      as = _.as || ['a', 'b'],\n      a = as[0],\n      b = as[1],\n      reset = !data || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n\n  if (reset) {\n    if (data) out.rem = data;\n    data = pulse.materialize(pulse.SOURCE).source;\n    out.add = this.value = cross(data, a, b, _.filter || _vegaUtil.truthy);\n  } else {\n    out.mod = data;\n  }\n\n  out.source = this.value;\n  return out.modifies(as);\n};\n\nfunction cross(input, a, b, filter) {\n  var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j,\n      left;\n\n  for (; i < n; ++i) {\n    t[a] = left = input[i];\n    for (j = 0; j < n; ++j) {\n      t[b] = input[j];\n      if (filter(t)) {\n        data.push((0, _vegaDataflow.ingest)(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n\n  return data;\n}"},"hash":"96a78852e2673eaa821f3ea5af4a78b2","cacheData":{"env":{}}}