{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/topojson-client/package.json","includedInParent":true,"mtime":1490936790000},{"name":"./feature","loc":{"line":1,"column":21}},{"name":"./stitch","loc":{"line":2,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (topology) {\n  return (0, _feature.object)(topology, meshArcs.apply(this, arguments));\n};\n\nexports.meshArcs = meshArcs;\n\nvar _feature = require(\"./feature\");\n\nvar _stitch = require(\"./stitch\");\n\nvar _stitch2 = _interopRequireDefault(_stitch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return { type: \"MultiLineString\", arcs: (0, _stitch2.default)(topology, arcs) };\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({ i: i, g: geom });\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\":\n        o.geometries.forEach(geometry);break;\n      case \"LineString\":\n        extract1(o.arcs);break;\n      case \"MultiLineString\":case \"Polygon\":\n        extract2(o.arcs);break;\n      case \"MultiPolygon\":\n        extract3(o.arcs);break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null ? function (geoms) {\n    arcs.push(geoms[0].i);\n  } : function (geoms) {\n    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);\n  });\n\n  return arcs;\n}"},"hash":"66a548b0d1e747c1ced59fcc32d73dd5","cacheData":{"env":{}}}