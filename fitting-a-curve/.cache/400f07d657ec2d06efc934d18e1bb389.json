{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-encode/package.json","includedInParent":true,"mtime":1520281405000},{"name":"./ticks","loc":{"line":1,"column":60}},{"name":"vega-dataflow","loc":{"line":2,"column":32}},{"name":"vega-util","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = AxisTicks;\n\nvar _ticks = require('./ticks');\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Generates axis ticks for visualizing a spatial scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate ticks for.\n * @param {*} [params.count=10] - The approximate number of ticks, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\nfunction AxisTicks(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(AxisTicks, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  if (this.value && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      ticks = this.value,\n      scale = _.scale,\n      count = _.count == null ? _.values ? _.values.length : 10 : (0, _ticks.tickCount)(scale, _.count),\n      format = _.format || (0, _ticks.tickFormat)(scale, count, _.formatSpecifier),\n      values = _.values ? (0, _ticks.validTicks)(scale, _.values, count) : (0, _ticks.tickValues)(scale, count);\n\n  if (ticks) out.rem = ticks;\n\n  ticks = values.map(function (value, i) {\n    return (0, _vegaDataflow.ingest)({\n      index: i / (values.length - 1),\n      value: value,\n      label: format(value)\n    });\n  });\n\n  if (_.extra) {\n    // add an extra tick pegged to the initial domain value\n    // this is used to generate axes with 'binned' domains\n    ticks.push((0, _vegaDataflow.ingest)({\n      index: -1,\n      extra: { value: ticks[0].value },\n      label: ''\n    }));\n  }\n\n  out.source = ticks;\n  out.add = ticks;\n  this.value = ticks;\n\n  return out;\n};"},"hash":"0b4478d35d7335640d243324999ab11d","cacheData":{"env":{}}}