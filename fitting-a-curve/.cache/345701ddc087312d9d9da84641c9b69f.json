{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-view-transforms/package.json","includedInParent":true,"mtime":1518586109000},{"name":"vega-dataflow","loc":{"line":1,"column":24}},{"name":"vega-scenegraph","loc":{"line":2,"column":30}},{"name":"vega-util","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Mark;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaScenegraph = require('vega-scenegraph');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Bind scenegraph items to a scenegraph mark instance.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.markdef - The mark definition for creating the mark.\n *   This is an object of legal scenegraph mark properties which *must* include\n *   the 'marktype' property.\n */\nfunction Mark(params) {\n  _vegaDataflow.Transform.call(this, null, params);\n}\n\nvar prototype = (0, _vegaUtil.inherits)(Mark, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var mark = this.value;\n\n  // acquire mark on first invocation, bind context and group\n  if (!mark) {\n    mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup(_), _.index);\n    mark.group.context = _.context;\n    if (!_.context.group) _.context.group = mark.group;\n    mark.source = this;\n    mark.clip = _.clip;\n    mark.interactive = _.interactive;\n    this.value = mark;\n  }\n\n  // initialize entering items\n  var Init = mark.marktype === 'group' ? _vegaScenegraph.GroupItem : _vegaScenegraph.Item;\n  pulse.visit(pulse.ADD, function (item) {\n    Init.call(item, mark);\n  });\n\n  // update clipping and/or interactive status\n  if (_.modified('clip') || _.modified('interactive')) {\n    mark.clip = _.clip;\n    mark.interactive = !!_.interactive;\n    mark.zdirty = true; // force re-eval\n    pulse.reflow();\n  }\n\n  // bind items array to scenegraph mark\n  mark.items = pulse.source;\n  return pulse;\n};\n\nfunction lookup(_) {\n  var g = _.groups,\n      p = _.parent;\n  return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;\n}"},"hash":"c054f730e0c444c3f79e19168ce20957","cacheData":{"env":{}}}