{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-scenegraph/package.json","includedInParent":true,"mtime":1518728314000},{"name":"./Renderer","loc":{"line":1,"column":21}},{"name":"./marks/index","loc":{"line":2,"column":18}},{"name":"./util/dom","loc":{"line":3,"column":23}},{"name":"./util/tags","loc":{"line":4,"column":32}},{"name":"./util/text","loc":{"line":5,"column":30}},{"name":"./util/visit","loc":{"line":6,"column":20}},{"name":"./util/svg/clip","loc":{"line":7,"column":17}},{"name":"./util/svg/metadata","loc":{"line":8,"column":21}},{"name":"./util/svg/styles","loc":{"line":9,"column":38}},{"name":"vega-util","loc":{"line":10,"column":23}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SVGStringRenderer;\n\nvar _Renderer = require('./Renderer');\n\nvar _Renderer2 = _interopRequireDefault(_Renderer);\n\nvar _index = require('./marks/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _dom = require('./util/dom');\n\nvar _tags = require('./util/tags');\n\nvar _text = require('./util/text');\n\nvar _visit = require('./util/visit');\n\nvar _clip = require('./util/svg/clip');\n\nvar _clip2 = _interopRequireDefault(_clip);\n\nvar _metadata = require('./util/svg/metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _styles = require('./util/svg/styles');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction SVGStringRenderer(loader) {\n  _Renderer2.default.call(this, loader);\n\n  this._text = {\n    head: '',\n    bg: '',\n    root: '',\n    foot: '',\n    defs: '',\n    body: ''\n  };\n\n  this._defs = {\n    gradient: {},\n    clipping: {}\n  };\n}\n\nvar prototype = (0, _vegaUtil.inherits)(SVGStringRenderer, _Renderer2.default);\nvar base = _Renderer2.default.prototype;\n\nprototype.resize = function (width, height, origin, scaleFactor) {\n  base.resize.call(this, width, height, origin, scaleFactor);\n  var o = this._origin,\n      t = this._text;\n\n  var attr = {\n    class: 'marks',\n    width: this._width * this._scale,\n    height: this._height * this._scale,\n    viewBox: '0 0 ' + this._width + ' ' + this._height\n  };\n  for (var key in _metadata2.default) {\n    attr[key] = _metadata2.default[key];\n  }\n\n  t.head = (0, _tags.openTag)('svg', attr);\n\n  var bg = this._bgcolor;\n  if (bg === 'transparent' || bg === 'none') bg = null;\n\n  if (bg) {\n    t.bg = (0, _tags.openTag)('rect', {\n      width: this._width,\n      height: this._height,\n      style: 'fill: ' + bg + ';'\n    }) + (0, _tags.closeTag)('rect');\n  } else {\n    t.bg = '';\n  }\n\n  t.root = (0, _tags.openTag)('g', {\n    transform: 'translate(' + o + ')'\n  });\n\n  t.foot = (0, _tags.closeTag)('g') + (0, _tags.closeTag)('svg');\n\n  return this;\n};\n\nprototype.background = function () {\n  var rv = base.background.apply(this, arguments);\n  if (arguments.length && this._text.head) {\n    this.resize(this._width, this._height, this._origin, this._scale);\n  }\n  return rv;\n};\n\nprototype.svg = function () {\n  var t = this._text;\n  return t.head + t.bg + t.defs + t.root + t.body + t.foot;\n};\n\nprototype._render = function (scene) {\n  this._text.body = this.mark(scene);\n  this._text.defs = this.buildDefs();\n  return this;\n};\n\nprototype.buildDefs = function () {\n  var all = this._defs,\n      defs = '',\n      i,\n      id,\n      def,\n      stops;\n\n  for (id in all.gradient) {\n    def = all.gradient[id];\n    stops = def.stops;\n\n    defs += (0, _tags.openTag)('linearGradient', {\n      id: id,\n      x1: def.x1,\n      x2: def.x2,\n      y1: def.y1,\n      y2: def.y2\n    });\n\n    for (i = 0; i < stops.length; ++i) {\n      defs += (0, _tags.openTag)('stop', {\n        offset: stops[i].offset,\n        'stop-color': stops[i].color\n      }) + (0, _tags.closeTag)('stop');\n    }\n\n    defs += (0, _tags.closeTag)('linearGradient');\n  }\n\n  for (id in all.clipping) {\n    def = all.clipping[id];\n\n    defs += (0, _tags.openTag)('clipPath', { id: id });\n\n    if (def.path) {\n      defs += (0, _tags.openTag)('path', {\n        d: def.path\n      }) + (0, _tags.closeTag)('path');\n    } else {\n      defs += (0, _tags.openTag)('rect', {\n        x: 0,\n        y: 0,\n        width: def.width,\n        height: def.height\n      }) + (0, _tags.closeTag)('rect');\n    }\n\n    defs += (0, _tags.closeTag)('clipPath');\n  }\n\n  return defs.length > 0 ? (0, _tags.openTag)('defs') + defs + (0, _tags.closeTag)('defs') : '';\n};\n\nvar object;\n\nfunction emit(name, value, ns, prefixed) {\n  object[prefixed || name] = value;\n}\n\nprototype.attributes = function (attr, item) {\n  object = {};\n  attr(emit, item, this);\n  return object;\n};\n\nprototype.href = function (item) {\n  var that = this,\n      href = item.href,\n      attr;\n\n  if (href) {\n    if (attr = that._hrefs && that._hrefs[href]) {\n      return attr;\n    } else {\n      that.sanitizeURL(href).then(function (attr) {\n        // rewrite to use xlink namespace\n        // note that this will be deprecated in SVG 2.0\n        attr['xlink:href'] = attr.href;\n        attr.href = null;\n        (that._hrefs || (that._hrefs = {}))[href] = attr;\n      });\n    }\n  }\n  return null;\n};\n\nprototype.mark = function (scene) {\n  var renderer = this,\n      mdef = _index2.default[scene.marktype],\n      tag = mdef.tag,\n      defs = this._defs,\n      str = '',\n      style;\n\n  if (tag !== 'g' && scene.interactive === false) {\n    style = 'style=\"pointer-events: none;\"';\n  }\n\n  // render opening group tag\n  str += (0, _tags.openTag)('g', {\n    'class': (0, _dom.cssClass)(scene),\n    'clip-path': scene.clip ? (0, _clip2.default)(renderer, scene, scene.group) : null\n  }, style);\n\n  // render contained elements\n  function process(item) {\n    var href = renderer.href(item);\n    if (href) str += (0, _tags.openTag)('a', href);\n\n    style = tag !== 'g' ? applyStyles(item, scene, tag, defs) : null;\n    str += (0, _tags.openTag)(tag, renderer.attributes(mdef.attr, item), style);\n\n    if (tag === 'text') {\n      str += escape_text((0, _text.textValue)(item));\n    } else if (tag === 'g') {\n      str += (0, _tags.openTag)('path', renderer.attributes(mdef.background, item), applyStyles(item, scene, 'bgrect', defs)) + (0, _tags.closeTag)('path');\n\n      str += (0, _tags.openTag)('g', renderer.attributes(mdef.foreground, item)) + renderer.markGroup(item) + (0, _tags.closeTag)('g');\n    }\n\n    str += (0, _tags.closeTag)(tag);\n    if (href) str += (0, _tags.closeTag)('a');\n  }\n\n  if (mdef.nested) {\n    if (scene.items && scene.items.length) process(scene.items[0]);\n  } else {\n    (0, _visit.visit)(scene, process);\n  }\n\n  // render closing group tag\n  return str + (0, _tags.closeTag)('g');\n};\n\nprototype.markGroup = function (scene) {\n  var renderer = this,\n      str = '';\n\n  (0, _visit.visit)(scene, function (item) {\n    str += renderer.mark(item);\n  });\n\n  return str;\n};\n\nfunction applyStyles(o, mark, tag, defs) {\n  if (o == null) return '';\n  var i,\n      n,\n      prop,\n      name,\n      value,\n      s = '';\n\n  if (tag === 'bgrect' && mark.interactive === false) {\n    s += 'pointer-events: none; ';\n  }\n\n  if (tag === 'text') {\n    s += 'font: ' + (0, _text.font)(o) + '; ';\n  }\n\n  for (i = 0, n = _styles.styleProperties.length; i < n; ++i) {\n    prop = _styles.styleProperties[i];\n    name = _styles.styles[prop];\n    value = o[prop];\n\n    if (value == null) {\n      if (name === 'fill') {\n        s += 'fill: none; ';\n      }\n    } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {\n      // transparent is not a legal SVG value, so map to none instead\n      s += name + ': none; ';\n    } else {\n      if (value.id) {\n        // ensure definition is included\n        defs.gradient[value.id] = value;\n        value = 'url(#' + value.id + ')';\n      }\n      s += name + ': ' + value + '; ';\n    }\n  }\n\n  return s ? 'style=\"' + s.trim() + '\"' : null;\n}\n\nfunction escape_text(s) {\n  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}"},"hash":"a4e0055fda3d3e6aee68bc68143d133a","cacheData":{"env":{}}}