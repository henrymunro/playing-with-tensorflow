{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"./AggregateOps","loc":{"line":1,"column":58}},{"name":"./TupleStore","loc":{"line":2,"column":23}},{"name":"./WindowOps","loc":{"line":3,"column":34}},{"name":"vega-util","loc":{"line":4,"column":57}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = WindowState;\n\nvar _AggregateOps = require('./AggregateOps');\n\nvar _TupleStore = require('./TupleStore');\n\nvar _TupleStore2 = _interopRequireDefault(_TupleStore);\n\nvar _WindowOps = require('./WindowOps');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction WindowState(_) {\n  var self = this,\n      ops = (0, _vegaUtil.array)(_.ops),\n      fields = (0, _vegaUtil.array)(_.fields),\n      params = (0, _vegaUtil.array)(_.params),\n      as = (0, _vegaUtil.array)(_.as),\n      outputs = self.outputs = [],\n      windows = self.windows = [],\n      inputs = {},\n      map = {},\n      countOnly = true,\n      counts = [],\n      measures = [];\n\n  function visitInputs(f) {\n    (0, _vegaUtil.array)((0, _vegaUtil.accessorFields)(f)).forEach(function (_) {\n      inputs[_] = 1;\n    });\n  }\n  visitInputs(_.sort);\n\n  ops.forEach(function (op, i) {\n    var field = fields[i],\n        mname = (0, _vegaUtil.accessorName)(field),\n        name = (0, _AggregateOps.measureName)(op, mname, as[i]);\n\n    visitInputs(field);\n    outputs.push(name);\n\n    // Window operation\n    if (_WindowOps.WindowOps.hasOwnProperty(op)) {\n      windows.push((0, _WindowOps.WindowOp)(op, fields[i], params[i], name));\n    }\n\n    // Aggregate operation\n    else {\n        if (field == null && op !== 'count') {\n          (0, _vegaUtil.error)('Null aggregate field specified.');\n        }\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        var m = map[mname];\n        if (!m) {\n          m = map[mname] = [];\n          m.field = field;\n          measures.push(m);\n        }\n        m.push((0, _AggregateOps.createMeasure)(op, name));\n      }\n  });\n\n  if (counts.length || measures.length) {\n    self.cell = cell(measures, counts, countOnly);\n  }\n\n  self.inputs = Object.keys(inputs);\n}\n\nvar prototype = WindowState.prototype;\n\nprototype.init = function () {\n  this.windows.forEach(function (_) {\n    _.init();\n  });\n  if (this.cell) this.cell.init();\n};\n\nprototype.update = function (w, t) {\n  var self = this,\n      cell = self.cell,\n      wind = self.windows,\n      data = w.data,\n      m = wind && wind.length,\n      j;\n\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n    for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n    cell.set(t);\n  }\n  for (j = 0; j < m; ++j) wind[j].update(w, t);\n};\n\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(function (m) {\n    return (0, _AggregateOps.compileMeasures)(m, m.field);\n  });\n\n  var cell = {\n    num: 0,\n    agg: null,\n    store: false,\n    count: counts\n  };\n\n  if (!countOnly) {\n    var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n    for (; i < n; ++i) a[i] = new measures[i](cell);\n  }\n\n  if (cell.store) {\n    var store = cell.data = new _TupleStore2.default();\n  }\n\n  cell.add = function (t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n    for (var i = 0; i < n; ++i) {\n      a[i].add(a[i].get(t), t);\n    }\n  };\n\n  cell.rem = function (t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n    for (var i = 0; i < n; ++i) {\n      a[i].rem(a[i].get(t), t);\n    }\n  };\n\n  cell.set = function (t) {\n    var i, n;\n\n    // consolidate stored values\n    if (store) store.values();\n\n    // update tuple properties\n    for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n    if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n  };\n\n  cell.init = function () {\n    cell.num = 0;\n    if (store) store.reset();\n    for (var i = 0; i < n; ++i) a[i].init();\n  };\n\n  return cell;\n}"},"hash":"2dbd471acdbc9f170846aadef93d5294","cacheData":{"env":{}}}