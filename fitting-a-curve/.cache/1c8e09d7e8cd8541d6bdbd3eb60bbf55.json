{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-transforms/package.json","includedInParent":true,"mtime":1520278057000},{"name":"vega-dataflow","loc":{"line":1,"column":33}},{"name":"vega-util","loc":{"line":2,"column":32}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Filter;\n\nvar _vegaDataflow = require('vega-dataflow');\n\nvar _vegaUtil = require('vega-util');\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\nfunction Filter(params) {\n  _vegaDataflow.Transform.call(this, (0, _vegaUtil.fastmap)(), params);\n}\n\nFilter.Definition = {\n  \"type\": \"Filter\",\n  \"metadata\": { \"changes\": true },\n  \"params\": [{ \"name\": \"expr\", \"type\": \"expr\", \"required\": true }]\n};\n\nvar prototype = (0, _vegaUtil.inherits)(Filter, _vegaDataflow.Transform);\n\nprototype.transform = function (_, pulse) {\n  var df = pulse.dataflow,\n      cache = this.value,\n      // cache ids of filtered tuples\n  output = pulse.fork(),\n      add = output.add,\n      rem = output.rem,\n      mod = output.mod,\n      test = _.expr,\n      isMod = true;\n\n  pulse.visit(pulse.REM, function (t) {\n    var id = (0, _vegaDataflow.tupleid)(t);\n    if (!cache.has(id)) rem.push(t);else cache.delete(id);\n  });\n\n  pulse.visit(pulse.ADD, function (t) {\n    if (test(t, _)) add.push(t);else cache.set((0, _vegaDataflow.tupleid)(t), 1);\n  });\n\n  function revisit(t) {\n    var id = (0, _vegaDataflow.tupleid)(t),\n        b = test(t, _),\n        s = cache.get(id);\n    if (b && s) {\n      cache.delete(id);\n      add.push(t);\n    } else if (!b && !s) {\n      cache.set(id, 1);\n      rem.push(t);\n    } else if (isMod && b && !s) {\n      mod.push(t);\n    }\n  }\n\n  pulse.visit(pulse.MOD, revisit);\n\n  if (_.modified()) {\n    isMod = false;\n    pulse.visit(pulse.REFLOW, revisit);\n  }\n\n  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n  return output;\n};"},"hash":"c588eb5b665fcb365244827081e7a367","cacheData":{"env":{}}}