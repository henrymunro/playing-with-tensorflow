{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-view/package.json","includedInParent":true,"mtime":1520276980000},{"name":"./element","loc":{"line":1,"column":20}},{"name":"vega-util","loc":{"line":2,"column":23}},{"name":"d3-array","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (view, el, binding) {\n  if (!el) return;\n\n  var param = binding.param,\n      bind = binding.state;\n\n  if (!bind) {\n    bind = binding.state = {\n      elements: null,\n      active: false,\n      set: null,\n      update: function (value) {\n        bind.source = true;\n        view.signal(param.signal, value).run();\n      }\n    };\n    if (param.debounce) {\n      bind.update = (0, _vegaUtil.debounce)(param.debounce, bind.update);\n    }\n  }\n\n  generate(bind, el, param, view.signal(param.signal));\n\n  if (!bind.active) {\n    view.on(view._signals[param.signal], null, function () {\n      bind.source ? bind.source = false : bind.set(view.signal(param.signal));\n    });\n    bind.active = true;\n  }\n\n  return bind;\n};\n\nvar _element = require('./element');\n\nvar _element2 = _interopRequireDefault(_element);\n\nvar _vegaUtil = require('vega-util');\n\nvar _d3Array = require('d3-array');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BindClass = 'vega-bind',\n    NameClass = 'vega-bind-name',\n    RadioClass = 'vega-bind-radio',\n    OptionClass = 'vega-option-';\n\n/**\n * Bind a signal to an external HTML input element. The resulting two-way\n * binding will propagate input changes to signals, and propagate signal\n * changes to the input element state. If this view instance has no parent\n * element, we assume the view is headless and no bindings are created.\n * @param {Element|string} el - The parent DOM element to which the input\n *   element should be appended as a child. If string-valued, this argument\n *   will be treated as a CSS selector. If null or undefined, the parent\n *   element of this view will be used as the element.\n * @param {object} param - The binding parameters which specify the signal\n *   to bind to, the input element type, and type-specific configuration.\n * @return {View} - This view instance.\n */\n\n\n/**\n * Generate an HTML input form element and bind it to a signal.\n */\nfunction generate(bind, el, param, value) {\n  var div = (0, _element2.default)('div', { 'class': BindClass });\n\n  div.appendChild((0, _element2.default)('span', { 'class': NameClass }, param.name || param.signal));\n\n  el.appendChild(div);\n\n  var input = form;\n  switch (param.input) {\n    case 'checkbox':\n      input = checkbox;break;\n    case 'select':\n      input = select;break;\n    case 'radio':\n      input = radio;break;\n    case 'range':\n      input = range;break;\n  }\n\n  input(bind, div, param, value);\n}\n\n/**\n * Generates an arbitrary input form element.\n * The input type is controlled via user-provided parameters.\n */\nfunction form(bind, el, param, value) {\n  var node = (0, _element2.default)('input');\n\n  for (var key in param) {\n    if (key !== 'signal' && key !== 'element') {\n      node.setAttribute(key === 'input' ? 'type' : key, param[key]);\n    }\n  }\n  node.setAttribute('name', param.signal);\n  node.value = value;\n\n  el.appendChild(node);\n\n  node.addEventListener('input', function () {\n    bind.update(node.value);\n  });\n\n  bind.elements = [node];\n  bind.set = function (value) {\n    node.value = value;\n  };\n}\n\n/**\n * Generates a checkbox input element.\n */\nfunction checkbox(bind, el, param, value) {\n  var attr = { type: 'checkbox', name: param.signal };\n  if (value) attr.checked = true;\n  var node = (0, _element2.default)('input', attr);\n\n  el.appendChild(node);\n\n  node.addEventListener('change', function () {\n    bind.update(node.checked);\n  });\n\n  bind.elements = [node];\n  bind.set = function (value) {\n    node.checked = !!value || null;\n  };\n}\n\n/**\n * Generates a selection list input element.\n */\nfunction select(bind, el, param, value) {\n  var node = (0, _element2.default)('select', { name: param.signal });\n\n  param.options.forEach(function (option) {\n    var attr = { value: option };\n    if (valuesEqual(option, value)) attr.selected = true;\n    node.appendChild((0, _element2.default)('option', attr, option + ''));\n  });\n\n  el.appendChild(node);\n\n  node.addEventListener('change', function () {\n    bind.update(param.options[node.selectedIndex]);\n  });\n\n  bind.elements = [node];\n  bind.set = function (value) {\n    for (var i = 0, n = param.options.length; i < n; ++i) {\n      if (valuesEqual(param.options[i], value)) {\n        node.selectedIndex = i;return;\n      }\n    }\n  };\n}\n\n/**\n * Generates a radio button group.\n */\nfunction radio(bind, el, param, value) {\n  var group = (0, _element2.default)('span', { 'class': RadioClass });\n\n  el.appendChild(group);\n\n  bind.elements = param.options.map(function (option) {\n    var id = OptionClass + param.signal + '-' + option;\n\n    var attr = {\n      id: id,\n      type: 'radio',\n      name: param.signal,\n      value: option\n    };\n    if (valuesEqual(option, value)) attr.checked = true;\n\n    var input = (0, _element2.default)('input', attr);\n\n    input.addEventListener('change', function () {\n      bind.update(option);\n    });\n\n    group.appendChild(input);\n    group.appendChild((0, _element2.default)('label', { 'for': id }, option + ''));\n\n    return input;\n  });\n\n  bind.set = function (value) {\n    var nodes = bind.elements,\n        i = 0,\n        n = nodes.length;\n    for (; i < n; ++i) {\n      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;\n    }\n  };\n}\n\n/**\n * Generates a slider input element.\n */\nfunction range(bind, el, param, value) {\n  value = value !== undefined ? value : (+param.max + +param.min) / 2;\n\n  var min = param.min || Math.min(0, +value) || 0,\n      max = param.max || Math.max(100, +value) || 100,\n      step = param.step || (0, _d3Array.tickStep)(min, max, 100);\n\n  var node = (0, _element2.default)('input', {\n    type: 'range',\n    name: param.signal,\n    min: min,\n    max: max,\n    step: step\n  });\n  node.value = value;\n\n  var label = (0, _element2.default)('label', {}, +value);\n\n  el.appendChild(node);\n  el.appendChild(label);\n\n  function update() {\n    label.textContent = node.value;\n    bind.update(+node.value);\n  }\n\n  // subscribe to both input and change\n  // signal updates halt redundant values, maintaining performance\n  node.addEventListener('input', update);\n  node.addEventListener('change', update);\n\n  bind.elements = [node];\n  bind.set = function (value) {\n    node.value = value;\n    label.textContent = value;\n  };\n}\n\nfunction valuesEqual(a, b) {\n  return a === b || a + '' === b + '';\n}"},"hash":"b42631d31c59a241bbdf93286b4a51c1","cacheData":{"env":{}}}