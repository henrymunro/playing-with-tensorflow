{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"./ast","loc":{"line":1,"column":22}},{"name":"./prefixes","loc":{"line":2,"column":38}},{"name":"vega-util","loc":{"line":3,"column":28}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.data = data;\nexports.dataVisitor = dataVisitor;\nexports.indata = indata;\nexports.indataVisitor = indataVisitor;\nexports.setdata = setdata;\n\nvar _ast = require('./ast');\n\nvar _prefixes = require('./prefixes');\n\nvar _vegaUtil = require('vega-util');\n\nfunction data(name) {\n  var data = this.context.data[name];\n  return data ? data.values.value : [];\n}\n\nfunction dataVisitor(name, args, scope, params) {\n  if (args[0].type !== _ast.Literal) {\n    (0, _vegaUtil.error)('First argument to data functions must be a string literal.');\n  }\n\n  var data = args[0].value,\n      dataName = _prefixes.dataPrefix + data;\n\n  if (!params.hasOwnProperty(dataName)) {\n    params[dataName] = scope.getData(data).tuplesRef();\n  }\n}\n\nfunction indata(name, field, value) {\n  var index = this.context.data[name]['index:' + field],\n      entry = index ? index.value.get(value) : undefined;\n  return entry ? entry.count : entry;\n}\n\nfunction indataVisitor(name, args, scope, params) {\n  if (args[0].type !== _ast.Literal) (0, _vegaUtil.error)('First argument to indata must be a string literal.');\n  if (args[1].type !== _ast.Literal) (0, _vegaUtil.error)('Second argument to indata must be a string literal.');\n\n  var data = args[0].value,\n      field = args[1].value,\n      indexName = _prefixes.indexPrefix + field;\n\n  if (!params.hasOwnProperty(indexName)) {\n    params[indexName] = scope.getData(data).indataRef(scope, field);\n  }\n}\n\nfunction setdata(name, tuples) {\n  var df = this.context.dataflow,\n      data = this.context.data[name],\n      input = data.input;\n\n  df.pulse(input, df.changeset().remove(_vegaUtil.truthy).insert(tuples));\n  return 1;\n}"},"hash":"4dab7abd354ee7e346b57d40db3223a1","cacheData":{"env":{}}}