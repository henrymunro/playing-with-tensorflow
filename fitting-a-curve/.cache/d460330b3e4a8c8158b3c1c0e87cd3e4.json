{"dependencies":[{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/package.json","includedInParent":true,"mtime":1522495589000},{"name":"/Users/senecamac1/henry/playing-with-tensorflow/fitting-a-curve/node_modules/vega-parser/package.json","includedInParent":true,"mtime":1520359126000},{"name":"./expression","loc":{"line":1,"column":23}},{"name":"./field","loc":{"line":2,"column":18}},{"name":"../expression/prefixes","loc":{"line":3,"column":26}},{"name":"vega-util","loc":{"line":4,"column":36}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (enc, value, scope, params, fields) {\n  var scale = getScale(enc.scale, scope, params, fields),\n      interp,\n      func,\n      flag;\n\n  if (enc.range != null) {\n    // pull value from scale range\n    interp = +enc.range;\n    func = scale + '.range()';\n    value = interp === 0 ? func + '[0]' : '($=' + func + ',' + (interp === 1 ? '$[$.length-1]' : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';\n  } else {\n    // run value through scale and/or pull scale bandwidth\n    if (value !== undefined) value = scale + '(' + value + ')';\n\n    if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {\n      func = scale + '.bandwidth';\n      interp = +enc.band;\n      interp = func + '()' + (interp === 1 ? '' : '*' + interp);\n\n      // if we don't know the scale type, check for bandwidth\n      if (flag < 0) interp = '(' + func + '?' + interp + ':0)';\n\n      value = (value ? value + '+' : '') + interp;\n\n      if (enc.extra) {\n        // include logic to handle extraneous elements\n        value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';\n      }\n    }\n\n    if (value == null) value = '0';\n  }\n\n  return value;\n};\n\nexports.getScale = getScale;\n\nvar _expression = require('./expression');\n\nvar _expression2 = _interopRequireDefault(_expression);\n\nvar _field = require('./field');\n\nvar _field2 = _interopRequireDefault(_field);\n\nvar _prefixes = require('../expression/prefixes');\n\nvar _vegaUtil = require('vega-util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction hasBandwidth(name, scope) {\n  if (!(0, _vegaUtil.isString)(name)) return -1;\n  var type = scope.scaleType(name);\n  return type === 'band' || type === 'point' ? 1 : 0;\n}\n\nfunction getScale(name, scope, params, fields) {\n  var scaleName;\n\n  if ((0, _vegaUtil.isString)(name)) {\n    // direct scale lookup; add scale as parameter\n    scaleName = _prefixes.scalePrefix + name;\n    if (!params.hasOwnProperty(scaleName)) {\n      params[scaleName] = scope.scaleRef(name);\n    }\n    scaleName = (0, _vegaUtil.stringValue)(scaleName);\n  } else {\n    // indirect scale lookup; add all scales as parameters\n    for (scaleName in scope.scales) {\n      params[_prefixes.scalePrefix + scaleName] = scope.scaleRef(scaleName);\n    }\n    scaleName = (0, _vegaUtil.stringValue)(_prefixes.scalePrefix) + '+' + (name.signal ? '(' + (0, _expression2.default)(name.signal, scope, params, fields) + ')' : (0, _field2.default)(name, scope, params, fields));\n  }\n\n  return '_[' + scaleName + ']';\n}"},"hash":"effa807c62d1372401743a66ed0dd322","cacheData":{"env":{}}}